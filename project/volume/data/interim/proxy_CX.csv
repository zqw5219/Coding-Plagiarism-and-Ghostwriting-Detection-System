originalCode,typeIndicator,pureCode,pureComment,pureMacro
#include <stdio.h>,0.0,#include <stdio.h>,,
#include <string.h>,0.0,#include <string.h>,,
"#include ""csapp.h""",0.0,"#include ""csapp.h""",,
"#include ""cache.h""",0.0,"#include ""cache.h""",,
,0.0,,,
/* You won't lose style points for including this long line in your code */,1.0,,/* You won't lose style points for including this long line in your code */,
"static const char *user_agent_hdr = ""User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:10.0.3) Gecko/20120305 Firefox/10.0.3\r\n"";",0.0,"static const char *user_agent_hdr = ""User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:10.0.3) Gecko/20120305 Firefox/10.0.3\r\n"";",,
,0.0,,,
"void doit(int clientfd,CacheList *cache);",0.0,"void doit(int clientfd,CacheList *cache);",,
void *thread(void *var);,0.0,void *thread(void *var);,,
"int parse_url(const char *url,char *host, char *port, char *path);",0.0,"int parse_url(const char *url,char *host, char *port, char *path);",,
"void clienterror(int fd,char *cause,char *errnum, char *shortmsg, char *longmsg);",0.0,"void clienterror(int fd,char *cause,char *errnum, char *shortmsg, char *longmsg);",,
,0.0,,,
"int main(int argc,char **argv )",0.0,"int main(int argc,char **argv )",,
{,0.0,{,,
"int listenfd,connfd;",0.0,"int listenfd,connfd;",,
"char hostname[MAXLINE],port[MAXLINE];",0.0,"char hostname[MAXLINE],port[MAXLINE];",,
socklen_t clientlen;,0.0,socklen_t clientlen;,,
struct sockaddr_storage clientaddr;,0.0,struct sockaddr_storage clientaddr;,,
CacheList cache_store;,0.0,CacheList cache_store;,,
cache_init(&cache_store);,0.0,cache_init(&cache_store);,,
,0.0,,,
/* Check command line args */,1.0,,/* Check command line args */,
if (argc != 2) {,0.0,if (argc != 2) {,,
"fprintf(stderr, ""usage: %s <port>\n"", argv[0]);",0.0,"fprintf(stderr, ""usage: %s <port>\n"", argv[0]);",,
exit(1);,0.0,exit(1);,,
},0.0,},,
,0.0,,,
"Signal(SIGPIPE, SIG_IGN);",0.0,"Signal(SIGPIPE, SIG_IGN);",,
listenfd = Open_listenfd(argv[1]);,0.0,listenfd = Open_listenfd(argv[1]);,,
while (1) {,0.0,while (1) {,,
clientlen = sizeof(clientaddr);,0.0,clientlen = sizeof(clientaddr);,,
"connfd = Accept(listenfd, (SA *)&clientaddr, &clientlen);",0.0,"connfd = Accept(listenfd, (SA *)&clientaddr, &clientlen);",,
"Getnameinfo((SA *) &clientaddr, clientlen, hostname, MAXLINE, port, MAXLINE, 0);",0.0,"Getnameinfo((SA *) &clientaddr, clientlen, hostname, MAXLINE, port, MAXLINE, 0);",,
"printf(""Accepted connection from (%s, %s)\n"", hostname, port);",0.0,"printf(""Accepted connection from (%s, %s)\n"", hostname, port);",,
"doit(connfd,&cache_store);",0.0,"doit(connfd,&cache_store);",,
Close(connfd);,0.0,Close(connfd);,,
},0.0,},,
"printf(""%s"", user_agent_hdr);",0.0,"printf(""%s"", user_agent_hdr);",,
return 0;,0.0,return 0;,,
},0.0,},,
,0.0,,,
"void doit(int clientfd,CacheList *cache)",0.0,"void doit(int clientfd,CacheList *cache)",,
{,0.0,{,,
int endserverfd;,0.0,int endserverfd;,,
,0.0,,,
//store info from client,0.5,,//store info from client,
char tem_buf[MAXLINE];,0.0,char tem_buf[MAXLINE];,,
,0.0,,,
// store info from server,0.5,,// store info from server,
char serverbuf[MAXLINE];,0.0,char serverbuf[MAXLINE];,,
,0.0,,,
// char buf[MAXLINE];,0.5,,// char buf[MAXLINE];,
"char method[MAXLINE],uri[MAXLINE],version[MAXLINE];",0.0,"char method[MAXLINE],uri[MAXLINE],version[MAXLINE];",,
,0.0,,,
//store the line arguments,0.5,,//store the line arguments,
"char hostname[MAXLINE],path[MAXLINE],port[MAXLINE];",0.0,"char hostname[MAXLINE],path[MAXLINE],port[MAXLINE];",,
"rio_t fromclient,toEndserver;",0.0,"rio_t fromclient,toEndserver;",,
struct CachedItem* newNode=(struct CachedItem *)Malloc(sizeof(struct CachedItem ));,0.0,struct CachedItem* newNode=(struct CachedItem *)Malloc(sizeof(struct CachedItem ));,,
,0.0,,,
//store the headers,0.5,,//store the headers,
char newreq[MAXLINE];,0.0,char newreq[MAXLINE];,,
"memset(newreq,0,MAXLINE);",0.0,"memset(newreq,0,MAXLINE);",,
,0.0,,,
//store the items,0.5,,//store the items,
char *items;,0.0,char *items;,,
items = (char*)malloc(MAXLINE);,0.0,items = (char*)malloc(MAXLINE);,,
,0.0,,,
//read the request line and headers,0.5,,//read the request line and headers,
"rio_readinitb(&fromclient,clientfd);",0.0,"rio_readinitb(&fromclient,clientfd);",,
,0.0,,,
,0.0,,,
//error handles,0.5,,//error handles,
"if (!rio_readlineb(&fromclient,tem_buf,MAXLINE))",0.0,"if (!rio_readlineb(&fromclient,tem_buf,MAXLINE))",,
{,0.0,{,,
return;,0.0,return;,,
},0.0,},,
"sscanf(tem_buf, ""%s %s %s"",method,uri,version);",0.0,"sscanf(tem_buf, ""%s %s %s"",method,uri,version);",,
"if (strcasecmp(method,""GET""))",0.0,"if (strcasecmp(method,""GET""))",,
{,0.0,{,,
"clienterror(clientfd,method,""501"",""Not Implemented"", ""Proxy Server does not implement this method"");",0.0,"clienterror(clientfd,method,""501"",""Not Implemented"", ""Proxy Server does not implement this method"");",,
return;,0.0,return;,,
},0.0,},,
,0.0,,,
,0.0,,,
"if (!parse_url(uri,hostname,port,path))",0.0,"if (!parse_url(uri,hostname,port,path))",,
{,0.0,{,,
"clienterror(clientfd,uri,""404"",""Not found"", ""Request could not be parsed"");",0.0,"clienterror(clientfd,uri,""404"",""Not found"", ""Request could not be parsed"");",,
return;,0.0,return;,,
},0.0,},,
"if((newNode=find(uri,cache))!=NULL)",0.0,"if((newNode=find(uri,cache))!=NULL)",,
{,0.0,{,,
"rio_writen(clientfd,newNode->headers,strlen(newNode->headers));",0.0,"rio_writen(clientfd,newNode->headers,strlen(newNode->headers));",,
"rio_writen(clientfd,newNode->item_p,newNode->size);",0.0,"rio_writen(clientfd,newNode->item_p,newNode->size);",,
return;,0.0,return;,,
},0.0,},,
else{,0.0,else{,,
//did not find the cache in the list,0.5,,//did not find the cache in the list,
"endserverfd = open_clientfd(hostname,port);",0.0,"endserverfd = open_clientfd(hostname,port);",,
"rio_readinitb(&toEndserver,endserverfd);",0.0,"rio_readinitb(&toEndserver,endserverfd);",,
//build the first line,0.5,,//build the first line,
"sprintf(tem_buf,""GET %s HTTP/1.0\r\n"",path);",0.0,"sprintf(tem_buf,""GET %s HTTP/1.0\r\n"",path);",,
"rio_writen(endserverfd,tem_buf,strlen(tem_buf));",0.0,"rio_writen(endserverfd,tem_buf,strlen(tem_buf));",,
,0.0,,,
//init the request line,0.5,,//init the request line,
char host_store[MAXLINE];,0.0,char host_store[MAXLINE];,,
"sprintf(host_store,""Host: %s\r\n"",hostname);",0.0,"sprintf(host_store,""Host: %s\r\n"",hostname);",,
"rio_writen(endserverfd,host_store,strlen(host_store));",0.0,"rio_writen(endserverfd,host_store,strlen(host_store));",,
,0.0,,,
"strcpy(tem_buf,""Connection: close\r\n"");",0.0,"strcpy(tem_buf,""Connection: close\r\n"");",,
"rio_writen(endserverfd,tem_buf,strlen(tem_buf));",0.0,"rio_writen(endserverfd,tem_buf,strlen(tem_buf));",,
,0.0,,,
"strcpy(tem_buf,""Proxy-Connection: close\r\n"");",0.0,"strcpy(tem_buf,""Proxy-Connection: close\r\n"");",,
"rio_writen(endserverfd,tem_buf,strlen(tem_buf));",0.0,"rio_writen(endserverfd,tem_buf,strlen(tem_buf));",,
,0.0,,,
"strcpy(tem_buf,user_agent_hdr);",0.0,"strcpy(tem_buf,user_agent_hdr);",,
"rio_writen(endserverfd,tem_buf,strlen(tem_buf));",0.0,"rio_writen(endserverfd,tem_buf,strlen(tem_buf));",,
,0.0,,,
,0.0,,,
// read the line from the client once at a time,0.5,,// read the line from the client once at a time,
"while (rio_readlineb(&fromclient,tem_buf,MAXLINE)>2 )",0.0,"while (rio_readlineb(&fromclient,tem_buf,MAXLINE)>2 )",,
{,0.0,{,,
"if(!strcmp(tem_buf,""\r\n"")) break;",0.0,"if(!strcmp(tem_buf,""\r\n"")) break;",,
"if(strstr(tem_buf,""Host:"")!=NULL) continue;",0.0,"if(strstr(tem_buf,""Host:"")!=NULL) continue;",,
"if(strstr(tem_buf,""Connection:"")!=NULL) continue;",0.0,"if(strstr(tem_buf,""Connection:"")!=NULL) continue;",,
"if(strstr(tem_buf,""Proxy-Connection:"")!=NULL) continue;",0.0,"if(strstr(tem_buf,""Proxy-Connection:"")!=NULL) continue;",,
"if(strstr(tem_buf,""User-Agent:"")!=NULL) continue;",0.0,"if(strstr(tem_buf,""User-Agent:"")!=NULL) continue;",,
"rio_writen(endserverfd,tem_buf,strlen(tem_buf));",0.0,"rio_writen(endserverfd,tem_buf,strlen(tem_buf));",,
},0.0,},,
,0.0,,,
"rio_writen(endserverfd,tem_buf,strlen(tem_buf));",0.0,"rio_writen(endserverfd,tem_buf,strlen(tem_buf));",,
"rio_readinitb(&toEndserver,endserverfd);",0.0,"rio_readinitb(&toEndserver,endserverfd);",,
,0.0,,,
//read from server,0.5,,//read from server,
"while((rio_readlineb(&toEndserver,serverbuf ,MAXLINE)>2)){",0.0,"while((rio_readlineb(&toEndserver,serverbuf ,MAXLINE)>2)){",,
"rio_writen(clientfd,serverbuf,strlen(serverbuf));",0.0,"rio_writen(clientfd,serverbuf,strlen(serverbuf));",,
"strncat(newreq,serverbuf,strlen(serverbuf));",0.0,"strncat(newreq,serverbuf,strlen(serverbuf));",,
},0.0,},,
"rio_writen(clientfd,serverbuf,strlen(serverbuf));",0.0,"rio_writen(clientfd,serverbuf,strlen(serverbuf));",,
"strncat(newreq,serverbuf,strlen(serverbuf));",0.0,"strncat(newreq,serverbuf,strlen(serverbuf));",,
,0.0,,,
int n;,0.0,int n;,,
"while ((n = rio_readnb(&toEndserver,serverbuf,MAXLINE))>0){",0.0,"while ((n = rio_readnb(&toEndserver,serverbuf,MAXLINE))>0){",,
"memcpy(items,serverbuf,n);",0.0,"memcpy(items,serverbuf,n);",,
"rio_writen(clientfd,serverbuf,n);",0.0,"rio_writen(clientfd,serverbuf,n);",,
},0.0,},,
,0.0,,,
//store the new cache into the list,0.5,,//store the new cache into the list,
"cache_URL(uri,newreq,items,strlen(items),cache);",0.0,"cache_URL(uri,newreq,items,strlen(items),cache);",,
close(endserverfd);,0.0,close(endserverfd);,,
return;,0.0,return;,,
},0.0,},,
},0.0,},,
,0.0,,,
,0.0,,,
,0.0,,,
"void clienterror(int fd,char *cause,char *errnum, char *shortmsg, char *longmsg)",0.0,"void clienterror(int fd,char *cause,char *errnum, char *shortmsg, char *longmsg)",,
{,0.0,{,,
"char buf[MAXLINE],body[MAXBUF];",0.0,"char buf[MAXLINE],body[MAXBUF];",,
,0.0,,,
//build the http response body,0.5,,//build the http response body,
"sprintf(body,""<html><title>Proxy Error</title>"");",0.0,"sprintf(body,""<html><title>Proxy Error</title>"");",,
"sprintf(body,""%s<body bgcolor=""""ffffff"""">\r\n"",body);",0.0,"sprintf(body,""%s<body bgcolor=""""ffffff"""">\r\n"",body);",,
"sprintf(body,""%s%s: %s\r\n"",body,errnum,shortmsg);",0.0,"sprintf(body,""%s%s: %s\r\n"",body,errnum,shortmsg);",,
"sprintf(body,""%s<p>%s: %s\r\n"",body,longmsg,cause);",0.0,"sprintf(body,""%s<p>%s: %s\r\n"",body,longmsg,cause);",,
"sprintf(body,""%s<hr><em>The Proxy Web server</em>\r\n"",body);",0.0,"sprintf(body,""%s<hr><em>The Proxy Web server</em>\r\n"",body);",,
,0.0,,,
// print the HTTP response,0.5,,// print the HTTP response,
"sprintf(buf,""HTTP/1.0 %s %s\r\n"",errnum,shortmsg);",0.0,"sprintf(buf,""HTTP/1.0 %s %s\r\n"",errnum,shortmsg);",,
"rio_writen(fd,buf,strlen(buf));",0.0,"rio_writen(fd,buf,strlen(buf));",,
"sprintf(buf, ""Content-type: text/html\r\n"");",0.0,"sprintf(buf, ""Content-type: text/html\r\n"");",,
"rio_writen(fd,buf,strlen(buf));",0.0,"rio_writen(fd,buf,strlen(buf));",,
"sprintf(buf, ""Content-length: %d\r\n\r\n"",(int)strlen(body));",0.0,"sprintf(buf, ""Content-length: %d\r\n\r\n"",(int)strlen(body));",,
"rio_writen(fd,buf,strlen(buf));",0.0,"rio_writen(fd,buf,strlen(buf));",,
"rio_writen(fd,body,strlen(body));",0.0,"rio_writen(fd,body,strlen(body));",,
},0.0,},,
,0.0,,,
"int parse_url(const char *url,char *host, char *port, char *path)",0.0,"int parse_url(const char *url,char *host, char *port, char *path)",,
{,0.0,{,,
char tem_host[10000];,0.0,char tem_host[10000];,,
"if (strncasecmp(url,""http://"",6)!=0)",0.5,"if (strncasecmp(url,""http:","//"",6)!=0)",
{,0.0,{,,
return 0;,0.0,return 0;,,
},0.0,},,
"strcpy(tem_host,url+7);",0.0,"strcpy(tem_host,url+7);",,
int url_len =strlen(tem_host);,0.0,int url_len =strlen(tem_host);,,
int count;,0.0,int count;,,
int i;,0.0,int i;,,
for (count=0;count<url_len;++count),0.0,for (count=0;count<url_len;++count),,
{,0.0,{,,
if (tem_host[count]==':'),0.0,if (tem_host[count]==':'),,
{,0.0,{,,
"strncpy(host,tem_host,count);",0.0,"strncpy(host,tem_host,count);",,
host[count]='\0';,0.0,host[count]='\0';,,
count++;,0.0,count++;,,
i=count;,0.0,i=count;,,
while (count<url_len),0.0,while (count<url_len),,
{,0.0,{,,
if (tem_host[count] == '/'),0.0,if (tem_host[count] == '/'),,
{,0.0,{,,
int end=count-i;,0.0,int end=count-i;,,
"strncpy(port,tem_host+i,end);",0.0,"strncpy(port,tem_host+i,end);",,
port[end]='\0';,0.0,port[end]='\0';,,
if (tem_host[count+1]!=0),0.0,if (tem_host[count+1]!=0),,
{,0.0,{,,
int end=url_len-count;,0.0,int end=url_len-count;,,
"strncpy(path,tem_host+count,end);",0.0,"strncpy(path,tem_host+count,end);",,
path[end]='\0';,0.0,path[end]='\0';,,
return 1;,0.0,return 1;,,
},0.0,},,
else,0.0,else,,
{,0.0,{,,
"strcpy(path,""/\0"");",0.0,"strcpy(path,""/\0"");",,
return 1;,0.0,return 1;,,
},0.0,},,
},0.0,},,
count++;,0.0,count++;,,
},0.0,},,
if (count==url_len),0.0,if (count==url_len),,
{,0.0,{,,
"strcpy(port,tem_host+i);",0.0,"strcpy(port,tem_host+i);",,
"strcpy(path,""/\0"");",0.0,"strcpy(path,""/\0"");",,
return 1;,0.0,return 1;,,
},0.0,},,
},0.0,},,
if (tem_host[count] == '/'),0.0,if (tem_host[count] == '/'),,
{,0.0,{,,
"strncpy(host,tem_host,count);",0.0,"strncpy(host,tem_host,count);",,
host[count]='\0';,0.0,host[count]='\0';,,
"strcpy(port,""80\0"");",0.0,"strcpy(port,""80\0"");",,
"strncpy(path,tem_host+count,url_len-count);",0.0,"strncpy(path,tem_host+count,url_len-count);",,
path[url_len-count]='\0';,0.0,path[url_len-count]='\0';,,
return 1;,0.0,return 1;,,
},0.0,},,
},0.0,},,
if (count==url_len),0.0,if (count==url_len),,
{,0.0,{,,
if (tem_host[count]=='/'),0.0,if (tem_host[count]=='/'),,
{,0.0,{,,
"strncpy(host,tem_host,count-1);",0.0,"strncpy(host,tem_host,count-1);",,
host[count-1]='\0';,0.0,host[count-1]='\0';,,
}else,0.0,}else,,
{,0.0,{,,
"strcpy(host,tem_host);",0.0,"strcpy(host,tem_host);",,
},0.0,},,
"strcpy(port,""80\0"");",0.0,"strcpy(port,""80\0"");",,
"strcpy(path,""/\0"");",0.0,"strcpy(path,""/\0"");",,
return 1;,0.0,return 1;,,
},0.0,},,
return 1;,0.0,return 1;,,
},0.0,},,
,0.0,,,
