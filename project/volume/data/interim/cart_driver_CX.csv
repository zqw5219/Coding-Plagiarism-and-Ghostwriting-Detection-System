originalCode,typeIndicator,pureCode,pureComment,pureMacro
////////////////////////////////////////////////////////////////////////////////,0.5,,////////////////////////////////////////////////////////////////////////////////,
//,0.5,,//,
//  File           : cart_driver.c,0.5,,//  File           : cart_driver.c,
//  Description    : This is the implementation of the standardized IO functions,0.5,,//  Description    : This is the implementation of the standardized IO functions,
//                   for used to access the CART storage system.,0.5,,//                   for used to access the CART storage system.,
//,0.5,,//,
//  Author         : [**Xing Chen**],0.5,,//  Author         : [**Xing Chen**],
//  PSU email      : [**xzc5179@psu.edu**],0.5,,//  PSU email      : [**xzc5179@psu.edu**],
//,0.5,,//,
,0.0,,,
// Includes,0.5,,// Includes,
#include <stdlib.h>,0.0,#include <stdlib.h>,,
#include <stdio.h>,0.0,#include <stdio.h>,,
#include <string.h>,0.0,#include <string.h>,,
,0.0,,,
// Project Includes,0.5,,// Project Includes,
"#include ""cart_driver.h""",0.0,"#include ""cart_driver.h""",,
"#include ""cart_controller.h""",0.0,"#include ""cart_controller.h""",,
,0.0,,,
//,0.5,,//,
// Implementation,0.5,,// Implementation,
,0.0,,,
//constants definition,0.5,,//constants definition,
#define MAX_FILE_NUMBER 1024,0.0,#define MAX_FILE_NUMBER 1024,,
,0.0,,,
//Functional Prototypes,0.5,,//Functional Prototypes,
int16_t find_file_byname(char* path);,0.0,int16_t find_file_byname(char* path);,,
int16_t create_empty_file(char* path);,0.0,int16_t create_empty_file(char* path);,,
,0.0,,,
// Type definitions,0.5,,// Type definitions,
"// name - path of the file, assumed to be unique",0.5,,"// name - path of the file, assumed to be unique",
// total_size - total number of bytes the file contains,0.5,,// total_size - total number of bytes the file contains,
// pos - the current position of the file either to read or write,0.5,,// pos - the current position of the file either to read or write,
"// is_open - 1 being open, 0 being closed",0.5,,"// is_open - 1 being open, 0 being closed",
// frames - maps the index of frame in file to the index of frame in cart,0.5,,// frames - maps the index of frame in file to the index of frame in cart,
// cart - maps the index of frame in file to the index of cart in cart,0.5,,// cart - maps the index of frame in file to the index of cart in cart,
typedef struct,0.0,typedef struct,,
{,0.0,{,,
char name[128];,0.0,char name[128];,,
int32_t total_size;,0.0,int32_t total_size;,,
int32_t pos;,0.0,int32_t pos;,,
int is_open;,0.0,int is_open;,,
int16_t frames[100];,0.0,int16_t frames[100];,,
int16_t carts[100];,0.0,int16_t carts[100];,,
}File;,0.0,}File;,,
,0.0,,,
//an fd table storing all files,0.5,,//an fd table storing all files,
//using fd number as index,0.5,,//using fd number as index,
//a File struct is stored in the corresponding fd to represent the file,0.5,,//a File struct is stored in the corresponding fd to represent the file,
//null pointer otherwise,0.5,,//null pointer otherwise,
File** files;,0.0,File** files;,,
,0.0,,,
//the number of frames that has been used in the cart,0.5,,//the number of frames that has been used in the cart,
int frame_count;,0.0,int frame_count;,,
,0.0,,,
////////////////////////////////////////////////////////////////////////////////,0.5,,////////////////////////////////////////////////////////////////////////////////,
//,0.5,,//,
// Function     : cart_poweron,0.5,,// Function     : cart_poweron,
"// Description  : Startup up the CART interface, initialize filesystem",0.5,,"// Description  : Startup up the CART interface, initialize filesystem",
//,0.5,,//,
// Inputs       : none,0.5,,// Inputs       : none,
"// Outputs      : 0 if successful, -1 if failure",0.5,,"// Outputs      : 0 if successful, -1 if failure",
,0.0,,,
int32_t cart_poweron(void) {,0.0,int32_t cart_poweron(void) {,,
,0.0,,,
//intialize cart,0.5,,//intialize cart,
"cart_io_bus((CartXferRegister)CART_OP_INITMS << 56, NULL);",0.0,"cart_io_bus((CartXferRegister)CART_OP_INITMS << 56, NULL);",,
int16_t CT1;,0.0,int16_t CT1;,,
for (CT1 = 0; CT1 < CART_MAX_CARTRIDGES; ++CT1),0.0,for (CT1 = 0; CT1 < CART_MAX_CARTRIDGES; ++CT1),,
{,0.0,{,,
"cart_io_bus(((CartXferRegister)CART_OP_LDCART << 56) | ((CartXferRegister)CT1 << 31), NULL);",0.0,"cart_io_bus(((CartXferRegister)CART_OP_LDCART << 56) | ((CartXferRegister)CT1 << 31), NULL);",,
"cart_io_bus((CartXferRegister)CART_OP_BZERO << 56, NULL);",0.0,"cart_io_bus((CartXferRegister)CART_OP_BZERO << 56, NULL);",,
},0.0,},,
,0.0,,,
//initialize driver,0.5,,//initialize driver,
"files = calloc(MAX_FILE_NUMBER, sizeof(File*));",0.0,"files = calloc(MAX_FILE_NUMBER, sizeof(File*));",,
frame_count = 0;,0.0,frame_count = 0;,,
,0.0,,,
// Return successfully,0.5,,// Return successfully,
return(0);,0.0,return(0);,,
},0.0,},,
,0.0,,,
////////////////////////////////////////////////////////////////////////////////,0.5,,////////////////////////////////////////////////////////////////////////////////,
//,0.5,,//,
// Function     : cart_poweroff,0.5,,// Function     : cart_poweroff,
"// Description  : Shut down the CART interface, close all files",0.5,,"// Description  : Shut down the CART interface, close all files",
//,0.5,,//,
// Inputs       : none,0.5,,// Inputs       : none,
"// Outputs      : 0 if successful, -1 if failure",0.5,,"// Outputs      : 0 if successful, -1 if failure",
,0.0,,,
int32_t cart_poweroff(void) {,0.0,int32_t cart_poweroff(void) {,,
,0.0,,,
//power off the cart,0.5,,//power off the cart,
"cart_io_bus((CartXferRegister)CART_OP_POWOFF << 56, NULL);",0.0,"cart_io_bus((CartXferRegister)CART_OP_POWOFF << 56, NULL);",,
,0.0,,,
//close and free all files,0.5,,//close and free all files,
int16_t fd;,0.0,int16_t fd;,,
for (fd = 0; fd < MAX_FILE_NUMBER; ++fd),0.0,for (fd = 0; fd < MAX_FILE_NUMBER; ++fd),,
{,0.0,{,,
if(files[fd] != NULL),0.0,if(files[fd] != NULL),,
{,0.0,{,,
if(cart_close(fd) == -1),0.0,if(cart_close(fd) == -1),,
return -1;,0.0,return -1;,,
,0.0,,,
free(files[fd]);,0.0,free(files[fd]);,,
},0.0,},,
},0.0,},,
,0.0,,,
//free the fd table,0.5,,//free the fd table,
free(files);,0.0,free(files);,,
,0.0,,,
// Return successfully,0.5,,// Return successfully,
return(0);,0.0,return(0);,,
},0.0,},,
,0.0,,,
////////////////////////////////////////////////////////////////////////////////,0.5,,////////////////////////////////////////////////////////////////////////////////,
//,0.5,,//,
// Function     : cart_open,0.5,,// Function     : cart_open,
// Description  : This function opens the file and returns a file handle,0.5,,// Description  : This function opens the file and returns a file handle,
//,0.5,,//,
// Inputs       : path - filename of the file to open,0.5,,// Inputs       : path - filename of the file to open,
"// Outputs      : file handle if successful, -1 if failure",0.5,,"// Outputs      : file handle if successful, -1 if failure",
,0.0,,,
int16_t cart_open(char *path) {,0.0,int16_t cart_open(char *path) {,,
,0.0,,,
//try to find an already open file with the same name,0.5,,//try to find an already open file with the same name,
int16_t fd = find_file_byname(path);,0.0,int16_t fd = find_file_byname(path);,,
,0.0,,,
//assign an empty fd number if not already existed,0.5,,//assign an empty fd number if not already existed,
if(fd == -1),0.0,if(fd == -1),,
fd = create_empty_file(path);,0.0,fd = create_empty_file(path);,,
,0.0,,,
"//error occur, fd table is full",0.5,,"//error occur, fd table is full",
if(fd == -1),0.0,if(fd == -1),,
return -1;,0.0,return -1;,,
,0.0,,,
files[fd]->is_open = 1;,0.0,files[fd]->is_open = 1;,,
,0.0,,,
// THIS SHOULD RETURN A FILE HANDLE,0.5,,// THIS SHOULD RETURN A FILE HANDLE,
return fd;,0.0,return fd;,,
},0.0,},,
,0.0,,,
////////////////////////////////////////////////////////////////////////////////,0.5,,////////////////////////////////////////////////////////////////////////////////,
//,0.5,,//,
// Function     : cart_close,0.5,,// Function     : cart_close,
// Description  : This function closes the file,0.5,,// Description  : This function closes the file,
//,0.5,,//,
// Inputs       : fd - the file descriptor,0.5,,// Inputs       : fd - the file descriptor,
"// Outputs      : 0 if successful, -1 if failure",0.5,,"// Outputs      : 0 if successful, -1 if failure",
,0.0,,,
int16_t cart_close(int16_t fd) {,0.0,int16_t cart_close(int16_t fd) {,,
,0.0,,,
//bad fd,0.5,,//bad fd,
if(fd < 0 || fd > MAX_FILE_NUMBER || files[fd] == NULL),0.0,if(fd < 0 || fd > MAX_FILE_NUMBER || files[fd] == NULL),,
return -1;,0.0,return -1;,,
,0.0,,,
files[fd]->is_open = 0;,0.0,files[fd]->is_open = 0;,,
,0.0,,,
// Return successfully,0.5,,// Return successfully,
return (0);,0.0,return (0);,,
},0.0,},,
,0.0,,,
////////////////////////////////////////////////////////////////////////////////,0.5,,////////////////////////////////////////////////////////////////////////////////,
//,0.5,,//,
// Function     : cart_read,0.5,,// Function     : cart_read,
"// Description  : Reads ""count"" bytes from the file handle ""fh"" into the",0.5,,"// Description  : Reads ""count"" bytes from the file handle ""fh"" into the",
"//                buffer ""buf""",0.5,,"//                buffer ""buf""",
//,0.5,,//,
// Inputs       : fd - filename of the file to read from,0.5,,// Inputs       : fd - filename of the file to read from,
//                buf - pointer to buffer to read into,0.5,,//                buf - pointer to buffer to read into,
//                count - number of bytes to read,0.5,,//                count - number of bytes to read,
"// Outputs      : bytes read if successful, -1 if failure",0.5,,"// Outputs      : bytes read if successful, -1 if failure",
,0.0,,,
"int32_t cart_read(int16_t fd, void *buf, int32_t count) {",0.0,"int32_t cart_read(int16_t fd, void *buf, int32_t count) {",,
,0.0,,,
//find the file,0.5,,//find the file,
if(fd < 0 || fd >= MAX_FILE_NUMBER),0.0,if(fd < 0 || fd >= MAX_FILE_NUMBER),,
return -1;,0.0,return -1;,,
if(files[fd] == NULL),0.0,if(files[fd] == NULL),,
return -1;,0.0,return -1;,,
File* file = files[fd];,0.0,File* file = files[fd];,,
,0.0,,,
//when file is not previously opened,0.5,,//when file is not previously opened,
if(file->is_open != 1),0.0,if(file->is_open != 1),,
return -1;,0.0,return -1;,,
,0.0,,,
//the number of bytes already read,0.5,,//the number of bytes already read,
int count_read = 0;,0.0,int count_read = 0;,,
,0.0,,,
//keep reading until the end,0.5,,//keep reading until the end,
//read no more than CART_FRAME_SIZE in each iteration,0.5,,//read no more than CART_FRAME_SIZE in each iteration,
while(count_read != count && file->pos < file->total_size),0.0,while(count_read != count && file->pos < file->total_size),,
{,0.0,{,,
,0.0,,,
"char* text = calloc(CART_FRAME_SIZE, sizeof(char));",0.0,"char* text = calloc(CART_FRAME_SIZE, sizeof(char));",,
,0.0,,,
//find the current reading frame of the file,0.5,,//find the current reading frame of the file,
int index = file->pos / CART_FRAME_SIZE;,0.0,int index = file->pos / CART_FRAME_SIZE;,,
,0.0,,,
//load the existing data of the frame from cart,0.5,,//load the existing data of the frame from cart,
"cart_io_bus(((CartXferRegister)CART_OP_LDCART << 56) | ((CartXferRegister)file->carts[index] << 31), NULL);",0.0,"cart_io_bus(((CartXferRegister)CART_OP_LDCART << 56) | ((CartXferRegister)file->carts[index] << 31), NULL);",,
"cart_io_bus(((CartXferRegister)CART_OP_RDFRME << 56) | ((CartXferRegister)file->frames[index] << 15), text);",0.0,"cart_io_bus(((CartXferRegister)CART_OP_RDFRME << 56) | ((CartXferRegister)file->frames[index] << 15), text);",,
,0.0,,,
//decide the number of bytes to read,0.5,,//decide the number of bytes to read,
"//calculate the minimum among: the remaining bytes in current frame,",0.5,,"//calculate the minimum among: the remaining bytes in current frame,",
"//                             the remaining bytes of the file,",0.5,,"//                             the remaining bytes of the file,",
//                             and the remaining bytes to read,0.5,,//                             and the remaining bytes to read,
int pos_in_frame = file->pos % CART_FRAME_SIZE;,0.0,int pos_in_frame = file->pos % CART_FRAME_SIZE;,,
int num_read = CART_FRAME_SIZE;,0.0,int num_read = CART_FRAME_SIZE;,,
if(pos_in_frame < CART_FRAME_SIZE),0.0,if(pos_in_frame < CART_FRAME_SIZE),,
num_read = CART_FRAME_SIZE - pos_in_frame;,0.0,num_read = CART_FRAME_SIZE - pos_in_frame;,,
if(file->total_size - file->pos < num_read),0.0,if(file->total_size - file->pos < num_read),,
num_read = file->total_size - file->pos;,0.0,num_read = file->total_size - file->pos;,,
if(count - count_read < num_read),0.0,if(count - count_read < num_read),,
num_read = count - count_read;,0.0,num_read = count - count_read;,,
,0.0,,,
//read the data,0.5,,//read the data,
"memcpy(buf + count_read, text + pos_in_frame, num_read);",0.0,"memcpy(buf + count_read, text + pos_in_frame, num_read);",,
count_read += num_read;,0.0,count_read += num_read;,,
,0.0,,,
//update the position of the file,0.5,,//update the position of the file,
file->pos += num_read;,0.0,file->pos += num_read;,,
,0.0,,,
free(text);,0.0,free(text);,,
},0.0,},,
,0.0,,,
// Return successfully,0.5,,// Return successfully,
return count_read;,0.0,return count_read;,,
},0.0,},,
,0.0,,,
////////////////////////////////////////////////////////////////////////////////,0.5,,////////////////////////////////////////////////////////////////////////////////,
//,0.5,,//,
// Function     : cart_write,0.5,,// Function     : cart_write,
"// Description  : Writes ""count"" bytes to the file handle ""fh"" from the",0.5,,"// Description  : Writes ""count"" bytes to the file handle ""fh"" from the",
"//                buffer  ""buf""",0.5,,"//                buffer  ""buf""",
//,0.5,,//,
// Inputs       : fd - filename of the file to write to,0.5,,// Inputs       : fd - filename of the file to write to,
//                buf - pointer to buffer to write from,0.5,,//                buf - pointer to buffer to write from,
//                count - number of bytes to write,0.5,,//                count - number of bytes to write,
"// Outputs      : bytes written if successful, -1 if failure",0.5,,"// Outputs      : bytes written if successful, -1 if failure",
,0.0,,,
"int32_t cart_write(int16_t fd, void *buf, int32_t count) {",0.0,"int32_t cart_write(int16_t fd, void *buf, int32_t count) {",,
,0.0,,,
//find the file,0.5,,//find the file,
if(fd < 0 || fd >= MAX_FILE_NUMBER),0.0,if(fd < 0 || fd >= MAX_FILE_NUMBER),,
return -1;,0.0,return -1;,,
if(files[fd] == NULL),0.0,if(files[fd] == NULL),,
return -1;,0.0,return -1;,,
,0.0,,,
File* file = files[fd];,0.0,File* file = files[fd];,,
,0.0,,,
//when file is not previously opened,0.5,,//when file is not previously opened,
if(file->is_open != 1),0.0,if(file->is_open != 1),,
return -1;,0.0,return -1;,,
,0.0,,,
//the number of bytes reamined to be written,0.5,,//the number of bytes reamined to be written,
int count_remain = count;,0.0,int count_remain = count;,,
,0.0,,,
//in case the position is at half way of an old frame,0.5,,//in case the position is at half way of an old frame,
if(file->pos % CART_FRAME_SIZE != 0),0.0,if(file->pos % CART_FRAME_SIZE != 0),,
{,0.0,{,,
"char* text = calloc(CART_FRAME_SIZE, sizeof(char));",0.0,"char* text = calloc(CART_FRAME_SIZE, sizeof(char));",,
int frame_index = file->pos / CART_FRAME_SIZE;,0.0,int frame_index = file->pos / CART_FRAME_SIZE;,,
,0.0,,,
//read the existing data,0.5,,//read the existing data,
"cart_io_bus(((CartXferRegister)CART_OP_LDCART << 56) | ((CartXferRegister)file->carts[frame_index] << 31), NULL);",0.0,"cart_io_bus(((CartXferRegister)CART_OP_LDCART << 56) | ((CartXferRegister)file->carts[frame_index] << 31), NULL);",,
"cart_io_bus(((CartXferRegister)CART_OP_RDFRME << 56) | ((CartXferRegister)file->frames[frame_index] << 15), text);",0.0,"cart_io_bus(((CartXferRegister)CART_OP_RDFRME << 56) | ((CartXferRegister)file->frames[frame_index] << 15), text);",,
,0.0,,,
//decide the number of bytes written,0.5,,//decide the number of bytes written,
int pos_in_frame = file->pos % CART_FRAME_SIZE;,0.0,int pos_in_frame = file->pos % CART_FRAME_SIZE;,,
int num_write = count_remain;,0.0,int num_write = count_remain;,,
if(CART_FRAME_SIZE - pos_in_frame < count_remain),0.0,if(CART_FRAME_SIZE - pos_in_frame < count_remain),,
num_write = CART_FRAME_SIZE - pos_in_frame;,0.0,num_write = CART_FRAME_SIZE - pos_in_frame;,,
,0.0,,,
//update the position and size of file,0.5,,//update the position and size of file,
file->pos += num_write;,0.0,file->pos += num_write;,,
if(file->pos > file->total_size),0.0,if(file->pos > file->total_size),,
file->total_size = file->pos;,0.0,file->total_size = file->pos;,,
,0.0,,,
//write the data,0.5,,//write the data,
"memcpy(text + pos_in_frame, buf, num_write);",0.0,"memcpy(text + pos_in_frame, buf, num_write);",,
count_remain -= num_write;,0.0,count_remain -= num_write;,,
"cart_io_bus(((CartXferRegister)CART_OP_WRFRME << 56) | ((CartXferRegister)file->frames[frame_index] << 15), text);",0.0,"cart_io_bus(((CartXferRegister)CART_OP_WRFRME << 56) | ((CartXferRegister)file->frames[frame_index] << 15), text);",,
,0.0,,,
free(text);,0.0,free(text);,,
},0.0,},,
,0.0,,,
//assert pos % CART_FRAME_SIZE == 0 at this step,0.5,,//assert pos % CART_FRAME_SIZE == 0 at this step,
//write no more than one frame in each iteration,0.5,,//write no more than one frame in each iteration,
while(count_remain != 0),0.0,while(count_remain != 0),,
{,0.0,{,,
,0.0,,,
"char* text = calloc(CART_FRAME_SIZE, sizeof(char));",0.0,"char* text = calloc(CART_FRAME_SIZE, sizeof(char));",,
,0.0,,,
//indicate the current frame of the file,0.5,,//indicate the current frame of the file,
int frame_index;,0.0,int frame_index;,,
,0.0,,,
//ask for a new frame,0.5,,//ask for a new frame,
if(file->pos == file->total_size),0.0,if(file->pos == file->total_size),,
{,0.0,{,,
,0.0,,,
frame_index = file->pos / CART_FRAME_SIZE;,0.0,frame_index = file->pos / CART_FRAME_SIZE;,,
file->carts[frame_index] = frame_count / CART_CARTRIDGE_SIZE;,0.0,file->carts[frame_index] = frame_count / CART_CARTRIDGE_SIZE;,,
file->frames[frame_index] = frame_count % CART_CARTRIDGE_SIZE;,0.0,file->frames[frame_index] = frame_count % CART_CARTRIDGE_SIZE;,,
frame_count++;,0.0,frame_count++;,,
},0.0,},,
,0.0,,,
//or use an old frame,0.5,,//or use an old frame,
else,0.0,else,,
{,0.0,{,,
frame_index = file->pos / CART_FRAME_SIZE;,0.0,frame_index = file->pos / CART_FRAME_SIZE;,,
},0.0,},,
,0.0,,,
//read the old data from cart of the frame,0.5,,//read the old data from cart of the frame,
"cart_io_bus(((CartXferRegister)CART_OP_LDCART << 56) | ((CartXferRegister)file->carts[frame_index] << 31), NULL);",0.0,"cart_io_bus(((CartXferRegister)CART_OP_LDCART << 56) | ((CartXferRegister)file->carts[frame_index] << 31), NULL);",,
"cart_io_bus(((CartXferRegister)CART_OP_RDFRME << 56) | ((CartXferRegister)file->frames[frame_index] << 15), text);",0.0,"cart_io_bus(((CartXferRegister)CART_OP_RDFRME << 56) | ((CartXferRegister)file->frames[frame_index] << 15), text);",,
,0.0,,,
//decide the number of bytes to write in this iteration,0.5,,//decide the number of bytes to write in this iteration,
int num = CART_FRAME_SIZE;,0.0,int num = CART_FRAME_SIZE;,,
if(count_remain < CART_FRAME_SIZE),0.0,if(count_remain < CART_FRAME_SIZE),,
num = count_remain;,0.0,num = count_remain;,,
,0.0,,,
//update the position and total size of the file,0.5,,//update the position and total size of the file,
file->pos += num;,0.0,file->pos += num;,,
if(file->pos > file->total_size),0.0,if(file->pos > file->total_size),,
file->total_size = file->pos;,0.0,file->total_size = file->pos;,,
,0.0,,,
//write the bytes,0.5,,//write the bytes,
"memcpy(text, buf + (count - count_remain), num);",0.0,"memcpy(text, buf + (count - count_remain), num);",,
count_remain -= num;,0.0,count_remain -= num;,,
"cart_io_bus(((CartXferRegister)CART_OP_WRFRME << 56) | ((CartXferRegister)file->frames[frame_index] << 15), text);",0.0,"cart_io_bus(((CartXferRegister)CART_OP_WRFRME << 56) | ((CartXferRegister)file->frames[frame_index] << 15), text);",,
,0.0,,,
free(text);,0.0,free(text);,,
,0.0,,,
},0.0,},,
,0.0,,,
// Return successfully,0.5,,// Return successfully,
return (count);,0.0,return (count);,,
},0.0,},,
,0.0,,,
////////////////////////////////////////////////////////////////////////////////,0.5,,////////////////////////////////////////////////////////////////////////////////,
//,0.5,,//,
// Function     : cart_seek,0.5,,// Function     : cart_seek,
// Description  : Seek to specific point in the file,0.5,,// Description  : Seek to specific point in the file,
//,0.5,,//,
// Inputs       : fd - filename of the file to write to,0.5,,// Inputs       : fd - filename of the file to write to,
//                loc - offfset of file in relation to beginning of file,0.5,,//                loc - offfset of file in relation to beginning of file,
"// Outputs      : 0 if successful, -1 if failure",0.5,,"// Outputs      : 0 if successful, -1 if failure",
,0.0,,,
"int32_t cart_seek(int16_t fd, uint32_t loc) {",0.0,"int32_t cart_seek(int16_t fd, uint32_t loc) {",,
,0.0,,,
//find the file,0.5,,//find the file,
if(fd < 0 || fd >= MAX_FILE_NUMBER),0.0,if(fd < 0 || fd >= MAX_FILE_NUMBER),,
return -1;,0.0,return -1;,,
if(files[fd] == NULL),0.0,if(files[fd] == NULL),,
{,0.0,{,,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
File* file = files[fd];,0.0,File* file = files[fd];,,
,0.0,,,
if(loc > file->total_size),0.0,if(loc > file->total_size),,
return -1;,0.0,return -1;,,
,0.0,,,
//locate the position of the file,0.5,,//locate the position of the file,
file->pos = loc;,0.0,file->pos = loc;,,
,0.0,,,
// Return successfully,0.5,,// Return successfully,
return (0);,0.0,return (0);,,
},0.0,},,
,0.0,,,
// find an opened file with a specific name,0.5,,// find an opened file with a specific name,
int16_t find_file_byname(char* path),0.0,int16_t find_file_byname(char* path),,
{,0.0,{,,
,0.0,,,
//iterate through all files and compare the name,0.5,,//iterate through all files and compare the name,
int16_t fd;,0.0,int16_t fd;,,
for (fd = 0; fd < MAX_FILE_NUMBER; ++fd),0.0,for (fd = 0; fd < MAX_FILE_NUMBER; ++fd),,
{,0.0,{,,
,0.0,,,
if(files[fd] == NULL),0.0,if(files[fd] == NULL),,
continue;,0.0,continue;,,
,0.0,,,
"if(strcmp(files[fd]->name, path) == 0)",0.0,"if(strcmp(files[fd]->name, path) == 0)",,
return fd;,0.0,return fd;,,
},0.0,},,
,0.0,,,
//not found,0.5,,//not found,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
// find the first empty fd in fd table and create an empty file,0.5,,// find the first empty fd in fd table and create an empty file,
int16_t create_empty_file(char* path),0.0,int16_t create_empty_file(char* path),,
{,0.0,{,,
,0.0,,,
int16_t fd;,0.0,int16_t fd;,,
for(fd = 0; fd < MAX_FILE_NUMBER; ++fd),0.0,for(fd = 0; fd < MAX_FILE_NUMBER; ++fd),,
{,0.0,{,,
,0.0,,,
if(files[fd] == NULL),0.0,if(files[fd] == NULL),,
{,0.0,{,,
,0.0,,,
//create an empty file at the location,0.5,,//create an empty file at the location,
"File* file = calloc(1, sizeof(File));",0.0,"File* file = calloc(1, sizeof(File));",,
files[fd] = file;,0.0,files[fd] = file;,,
,0.0,,,
//initialize the file,0.5,,//initialize the file,
"strcpy(file->name, path);",0.0,"strcpy(file->name, path);",,
file->total_size = 0;,0.0,file->total_size = 0;,,
file->pos = 0;,0.0,file->pos = 0;,,
return fd;,0.0,return fd;,,
},0.0,},,
},0.0,},,
,0.0,,,
//table is full,0.5,,//table is full,
return -1;,0.0,return -1;,,
},0.0,},,
