originalCode,typeIndicator,pureCode,pureComment,pureMacro
//Email:finiantang0826@gmail.com,0.5,,//Email:finiantang0826@gmail.com,
//Name: Jing Tang,0.5,,//Name: Jing Tang,
,0.0,,,
#include <stdio.h>,0.0,#include <stdio.h>,,
#include <string.h>,0.0,#include <string.h>,,
#include <stdlib.h>,0.0,#include <stdlib.h>,,
"#include ""csapp.h""",0.0,"#include ""csapp.h""",,
"#include ""cache.h""",0.0,"#include ""cache.h""",,
,0.0,,,
"void doit(int fd, CacheList *cachelist);",0.0,"void doit(int fd, CacheList *cachelist);",,
"int parse_url(const char *url, char *host, char *port, char *path);",0.0,"int parse_url(const char *url, char *host, char *port, char *path);",,
"void request_header(char*host,char*path, char* output_header, rio_t rio);",0.0,"void request_header(char*host,char*path, char* output_header, rio_t rio);",,
/* You won't lose style points for including this long line in your code */,1.0,,/* You won't lose style points for including this long line in your code */,
"static const char *user_agent_hdr = ""User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:10.0.3) Gecko/20120305 Firefox/10.0.3\r\n"";",0.0,"static const char *user_agent_hdr = ""User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:10.0.3) Gecko/20120305 Firefox/10.0.3\r\n"";",,
"static const char *conn_header = ""Connection: close\r\n"";",0.0,"static const char *conn_header = ""Connection: close\r\n"";",,
"static const char *prox_header = ""Proxy-Connection: close\r\n"";",0.0,"static const char *prox_header = ""Proxy-Connection: close\r\n"";",,
"static const char *end = ""\r\n"";",0.0,"static const char *end = ""\r\n"";",,
,0.0,,,
"int main(int argc, char** argv)",0.0,"int main(int argc, char** argv)",,
{,0.0,{,,
int listenfd;,0.0,int listenfd;,,
int connfd;,0.0,int connfd;,,
char hostname[MAXLINE];,0.0,char hostname[MAXLINE];,,
char* port = NULL;,0.0,char* port = NULL;,,
socklen_t clientlen;,0.0,socklen_t clientlen;,,
struct sockaddr_storage clientaddr;,0.0,struct sockaddr_storage clientaddr;,,
CacheList cachelist;,0.0,CacheList cachelist;,,
,0.0,,,
//check whether the input is a valid input,0.5,,//check whether the input is a valid input,
if(argc != 2){,0.0,if(argc != 2){,,
"printf(""Not a valid website\n"");",0.0,"printf(""Not a valid website\n"");",,
exit(1);,0.0,exit(1);,,
},0.0,},,
,0.0,,,
//init cache,0.5,,//init cache,
cache_init(&cachelist);,0.0,cache_init(&cachelist);,,
,0.0,,,
//connect to server,0.5,,//connect to server,
listenfd= open_listenfd(argv[1]);,0.0,listenfd= open_listenfd(argv[1]);,,
,0.0,,,
//accept connect and get information through port,0.5,,//accept connect and get information through port,
while (1) {,0.0,while (1) {,,
clientlen= sizeof(clientaddr);,0.0,clientlen= sizeof(clientaddr);,,
"connfd= accept(listenfd, (SA *)&clientaddr, &clientlen);",0.0,"connfd= accept(listenfd, (SA *)&clientaddr, &clientlen);",,
if(connfd<0){,0.0,if(connfd<0){,,
"printf(""Accept Error\n"");",0.0,"printf(""Accept Error\n"");",,
},0.0,},,
"getnameinfo((SA *) &clientaddr, clientlen, hostname, MAXLINE,port, MAXLINE, 0);",0.0,"getnameinfo((SA *) &clientaddr, clientlen, hostname, MAXLINE,port, MAXLINE, 0);",,
"printf(""Accepted connection from (%s, %s)\n"", hostname, port);",0.0,"printf(""Accepted connection from (%s, %s)\n"", hostname, port);",,
"doit(connfd,&cachelist);",0.0,"doit(connfd,&cachelist);",,
close(connfd);,0.0,close(connfd);,,
},0.0,},,
//destruct cache,0.5,,//destruct cache,
cache_destruct(&cachelist);,0.0,cache_destruct(&cachelist);,,
return 0;,0.0,return 0;,,
},0.0,},,
,0.0,,,
"void doit(int fd, CacheList *cachelist){",0.0,"void doit(int fd, CacheList *cachelist){",,
"char buf[MAXLINE], method[MAXLINE], url[MAXLINE], version[MAXLINE];",0.0,"char buf[MAXLINE], method[MAXLINE], url[MAXLINE], version[MAXLINE];",,
char host[MAXLINE];,0.0,char host[MAXLINE];,,
char port[MAXLINE];,0.0,char port[MAXLINE];,,
char path[MAXLINE];,0.0,char path[MAXLINE];,,
int serfd;,0.0,int serfd;,,
char client[MAXLINE];,0.0,char client[MAXLINE];,,
int result = 0;,0.0,int result = 0;,,
size_t n = 1;,0.0,size_t n = 1;,,
char *item = malloc(MAX_OBJECT_SIZE);,0.0,char *item = malloc(MAX_OBJECT_SIZE);,,
size_t size = 0;,0.0,size_t size = 0;,,
int status;,0.0,int status;,,
"char content[14] = ""Content-Length"";",0.0,"char content[14] = ""Content-Length"";",,
size_t csize = 0;,0.0,size_t csize = 0;,,
char header[MAXLINE];,0.0,char header[MAXLINE];,,
"memset(header,0,MAXLINE);",0.0,"memset(header,0,MAXLINE);",,
,0.0,,,
CachedItem *cache;,0.0,CachedItem *cache;,,
"rio_t rio,serrio;",0.0,"rio_t rio,serrio;",,
"rio_readinitb(&rio, fd);",0.0,"rio_readinitb(&rio, fd);",,
,0.0,,,
//check whether the client input something,0.5,,//check whether the client input something,
"if (!rio_readlineb(&rio, buf, MAXLINE)){",0.0,"if (!rio_readlineb(&rio, buf, MAXLINE)){",,
"printf(""There's nothing in the buf"");",0.0,"printf(""There's nothing in the buf"");",,
return;,0.0,return;,,
},0.0,},,
,0.0,,,
//scan the information from client,0.5,,//scan the information from client,
"sscanf(buf, ""%s %s %s"", method, url, version);",0.0,"sscanf(buf, ""%s %s %s"", method, url, version);",,
,0.0,,,
"//get port,host and path from url",0.5,,"//get port,host and path from url",
"result = parse_url(url,host,port,path);",0.0,"result = parse_url(url,host,port,path);",,
if(result == 0){,0.0,if(result == 0){,,
"printf(""Not a valid website"");",0.0,"printf(""Not a valid website"");",,
return;,0.0,return;,,
},0.0,},,
,0.0,,,
//check whether this url has already existed in cachelist,0.5,,//check whether this url has already existed in cachelist,
"//if it do exist, return the infomation to client",0.5,,"//if it do exist, return the infomation to client",
"//if not, continue going",0.5,,"//if not, continue going",
"cache = find(url,cachelist);",0.0,"cache = find(url,cachelist);",,
if(cache != NULL){,0.0,if(cache != NULL){,,
"rio_writen(fd,cache->headers,strlen(cache->headers));",0.0,"rio_writen(fd,cache->headers,strlen(cache->headers));",,
"rio_writen(fd,cache->item_p,cache->size);",0.0,"rio_writen(fd,cache->item_p,cache->size);",,
"printf(""FIND IT !!!!!!!! \n\n"");",0.0,"printf(""FIND IT !!!!!!!! \n\n"");",,
return;,0.0,return;,,
},0.0,},,
,0.0,,,
"printf(""Not FIND IT !!!!!\n\n"");",0.0,"printf(""Not FIND IT !!!!!\n\n"");",,
,0.0,,,
//get the header from client and modify to the form we want,0.5,,//get the header from client and modify to the form we want,
"request_header(host,path, client, rio);",0.0,"request_header(host,path, client, rio);",,
,0.0,,,
//connect to the end server,0.5,,//connect to the end server,
"serfd = open_clientfd(host, port);",0.0,"serfd = open_clientfd(host, port);",,
if(serfd<0){,0.0,if(serfd<0){,,
"printf(""Connection failed\n"");",0.0,"printf(""Connection failed\n"");",,
return;,0.0,return;,,
},0.0,},,
,0.0,,,
//begin to read the feedback from server and write those to the client,0.5,,//begin to read the feedback from server and write those to the client,
"rio_readinitb(&serrio,serfd);",0.0,"rio_readinitb(&serrio,serfd);",,
,0.0,,,
"rio_writen(serfd, client, strlen(client));",0.0,"rio_writen(serfd, client, strlen(client));",,
,0.0,,,
//read the header part,0.5,,//read the header part,
//check whther there is a 200 OK,0.5,,//check whther there is a 200 OK,
//get the content length,0.5,,//get the content length,
"while((n=rio_readlineb(&serrio,buf,MAXLINE))>2){",0.0,"while((n=rio_readlineb(&serrio,buf,MAXLINE))>2){",,
"rio_writen(fd, buf, n);",0.0,"rio_writen(fd, buf, n);",,
"strcat(header,buf);",0.0,"strcat(header,buf);",,
"if(strncasecmp(buf,version,n)){",0.0,"if(strncasecmp(buf,version,n)){",,
"sscanf(buf+8,""%d"",&status);",0.0,"sscanf(buf+8,""%d"",&status);",,
},0.0,},,
"if(strncasecmp(buf,content,14)==0){",0.0,"if(strncasecmp(buf,content,14)==0){",,
"sscanf(buf,""%s %zu"",content,&csize);",0.0,"sscanf(buf,""%s %zu"",content,&csize);",,
},0.0,},,
},0.0,},,
,0.0,,,
"rio_writen(fd,buf,strlen(buf));",0.0,"rio_writen(fd,buf,strlen(buf));",,
"strcat(header,buf);",0.0,"strcat(header,buf);",,
,0.0,,,
//read the item part,0.5,,//read the item part,
"while((n=rio_readnb(&serrio, buf, MAXLINE))>0){",0.0,"while((n=rio_readnb(&serrio, buf, MAXLINE))>0){",,
"printf(""Proxy received."");",0.0,"printf(""Proxy received."");",,
"rio_writen(fd,buf,n);",0.0,"rio_writen(fd,buf,n);",,
size+=n;,0.0,size+=n;,,
if(size<MAX_OBJECT_SIZE){,0.0,if(size<MAX_OBJECT_SIZE){,,
"memcpy(item,buf,n);",0.0,"memcpy(item,buf,n);",,
},0.0,},,
},0.0,},,
,0.0,,,
"printf(""Header: %s \n\n"", header);",0.0,"printf(""Header: %s \n\n"", header);",,
"printf(""Item: %s \n\n"", item);",0.0,"printf(""Item: %s \n\n"", item);",,
"printf(""URI: %s \n\n"", url);",0.0,"printf(""URI: %s \n\n"", url);",,
,0.0,,,
//check conditions and cache URL,0.5,,//check conditions and cache URL,
if (csize <= MAX_OBJECT_SIZE && status == 200 && csize == size) {,0.0,if (csize <= MAX_OBJECT_SIZE && status == 200 && csize == size) {,,
"cache_URL(url,header,(void*)item,size, cachelist);",0.0,"cache_URL(url,header,(void*)item,size, cachelist);",,
},0.0,},,
else{,0.0,else{,,
free(item);,0.0,free(item);,,
"printf(""Cannot Cache URL"");",0.0,"printf(""Cannot Cache URL"");",,
},0.0,},,
,0.0,,,
//check whether it is a get method,0.5,,//check whether it is a get method,
"if(strcasecmp(method, ""GET"")){",0.0,"if(strcasecmp(method, ""GET"")){",,
"printf(""Only support get method"");",0.0,"printf(""Only support get method"");",,
return;,0.0,return;,,
},0.0,},,
,0.0,,,
"printf(""DONE !!!!!!\n\n\n"");",0.0,"printf(""DONE !!!!!!\n\n\n"");",,
close(serfd);,0.0,close(serfd);,,
return;,0.0,return;,,
},0.0,},,
,0.0,,,
"void request_header(char*host,char*path, char* output_header, rio_t rio){",0.0,"void request_header(char*host,char*path, char* output_header, rio_t rio){",,
char getheader[MAXLINE];,0.0,char getheader[MAXLINE];,,
char hostheader[MAXLINE];,0.0,char hostheader[MAXLINE];,,
char other[MAXLINE];,0.0,char other[MAXLINE];,,
char buf[MAXLINE];,0.0,char buf[MAXLINE];,,
"char host_st[4] = ""Host"";",0.0,"char host_st[4] = ""Host"";",,
"char connection[10] = ""Connection"";",0.0,"char connection[10] = ""Connection"";",,
"char useragent[10] = ""User-Agent"";",0.0,"char useragent[10] = ""User-Agent"";",,
"char proxyconn[16] = ""Proxy-Connection"";",0.0,"char proxyconn[16] = ""Proxy-Connection"";",,
"char ifmod[17] = ""If-Modified-Since"";",0.0,"char ifmod[17] = ""If-Modified-Since"";",,
"char ifnone[13] = ""If-None-Match"";",0.0,"char ifnone[13] = ""If-None-Match"";",,
"sprintf(getheader,""GET %s HTTP/1.0\r\n"",path);",0.0,"sprintf(getheader,""GET %s HTTP/1.0\r\n"",path);",,
,0.0,,,
,0.0,,,
"while(rio_readlineb(&rio,buf,MAXLINE)> 2){",0.0,"while(rio_readlineb(&rio,buf,MAXLINE)> 2){",,
,0.0,,,
//find the host host part,0.5,,//find the host host part,
"//if there's no host in the header, create a new one",0.5,,"//if there's no host in the header, create a new one",
"if(strncasecmp(buf,host_st,strlen(host_st))>2){",0.0,"if(strncasecmp(buf,host_st,strlen(host_st))>2){",,
"strcpy(hostheader,buf);",0.0,"strcpy(hostheader,buf);",,
},0.0,},,
//check whether they are these five types of headers,0.5,,//check whether they are these five types of headers,
"//if it is not,keep it",0.5,,"//if it is not,keep it",
"if(strncasecmp(buf,connection,10)&&strncasecmp(buf,useragent,10)&&strncasecmp(buf,proxyconn,16)&&strncasecmp(buf,ifmod,17)&&strncasecmp(buf,ifnone,13)){",0.0,"if(strncasecmp(buf,connection,10)&&strncasecmp(buf,useragent,10)&&strncasecmp(buf,proxyconn,16)&&strncasecmp(buf,ifmod,17)&&strncasecmp(buf,ifnone,13)){",,
"strcat(other,buf);",0.0,"strcat(other,buf);",,
},0.0,},,
},0.0,},,
,0.0,,,
//creat a new host if there's nothing in the header,0.5,,//creat a new host if there's nothing in the header,
if(strlen(hostheader) == 0){,0.0,if(strlen(hostheader) == 0){,,
"sprintf(hostheader,""Host: %s\r\n"",host);",0.0,"sprintf(hostheader,""Host: %s\r\n"",host);",,
},0.0,},,
,0.0,,,
//form requewt header,0.5,,//form requewt header,
"sprintf(output_header,""%s%s%s%s%s%s%s"",getheader,user_agent_hdr,hostheader,conn_header,prox_header,other,end);",0.0,"sprintf(output_header,""%s%s%s%s%s%s%s"",getheader,user_agent_hdr,hostheader,conn_header,prox_header,other,end);",,
printf(output_header);,0.0,printf(output_header);,,
},0.0,},,
,0.0,,,
,0.0,,,
"int parse_url(const char *url, char *host, char *port, char *path) {",0.0,"int parse_url(const char *url, char *host, char *port, char *path) {",,
int pos;,0.0,int pos;,,
int len = strlen(url);,0.0,int len = strlen(url);,,
int myhost = -1;,0.0,int myhost = -1;,,
int myport = -1;,0.0,int myport = -1;,,
int mypath = -1;,0.0,int mypath = -1;,,
int i;,0.0,int i;,,
"char slash[1] = ""/"";",0.0,"char slash[1] = ""/"";",,
"char colon[1] = "":"";",0.0,"char colon[1] = "":"";",,
"char eighty[2] = ""80"";",0.0,"char eighty[2] = ""80"";",,
"char http[7] = ""http://"";",0.5,"char http[7] = ""http:","//"";",
if(url == NULL){,0.0,if(url == NULL){,,
return 0;,0.0,return 0;,,
},0.0,},,
,0.0,,,
//check whether it starts with http,0.5,,//check whether it starts with http,
"if(strncasecmp(url,http,7)!=0){",0.0,"if(strncasecmp(url,http,7)!=0){",,
pos = 0;,0.0,pos = 0;,,
return 0;,0.0,return 0;,,
},0.0,},,
else{,0.0,else{,,
pos = 7;,0.0,pos = 7;,,
},0.0,},,
,0.0,,,
//find the first colon or the first slash,0.5,,//find the first colon or the first slash,
for(i = pos;i<=len;i++){,0.0,for(i = pos;i<=len;i++){,,
,0.0,,,
"if(strncasecmp(url+i,colon,1)==0){",0.0,"if(strncasecmp(url+i,colon,1)==0){",,
myhost = i;,0.0,myhost = i;,,
myport = 0;,0.0,myport = 0;,,
break;,0.0,break;,,
},0.0,},,
,0.0,,,
"if(strncasecmp(url+i,slash,1)==0){",0.0,"if(strncasecmp(url+i,slash,1)==0){",,
myhost = i;,0.0,myhost = i;,,
break;,0.0,break;,,
},0.0,},,
},0.0,},,
,0.0,,,
"//if there's no port, return 1",0.5,,"//if there's no port, return 1",
if(myhost == 7){,0.0,if(myhost == 7){,,
return 1;,0.0,return 1;,,
},0.0,},,
,0.0,,,
"//if there's no colon or slash, host is all part of url",0.5,,"//if there's no colon or slash, host is all part of url",
if(myhost == -1){,0.0,if(myhost == -1){,,
myhost = len;,0.0,myhost = len;,,
},0.0,},,
,0.0,,,
"//if port exist, find the slash after colon",0.5,,"//if port exist, find the slash after colon",
if(myport == 0 && myhost<len){,0.0,if(myport == 0 && myhost<len){,,
for(i = myhost;i<len;i++){,0.0,for(i = myhost;i<len;i++){,,
"if(strncasecmp(url+i,slash,1)==0){",0.0,"if(strncasecmp(url+i,slash,1)==0){",,
myport = i;,0.0,myport = i;,,
},0.0,},,
},0.0,},,
},0.0,},,
,0.0,,,
"//if there's no slash, port is the rest part of url after host",0.5,,"//if there's no slash, port is the rest part of url after host",
if(myport ==0){,0.0,if(myport ==0){,,
myport = len;,0.0,myport = len;,,
},0.0,},,
,0.0,,,
//if there's no port,0.5,,//if there's no port,
if(myport == -1 && myhost < len){,0.0,if(myport == -1 && myhost < len){,,
mypath = 0;,0.0,mypath = 0;,,
},0.0,},,
,0.0,,,
//if there is a port,0.5,,//if there is a port,
if(myport != -1 && myport < len){,0.0,if(myport != -1 && myport < len){,,
mypath = 1;,0.0,mypath = 1;,,
},0.0,},,
,0.0,,,
//copy the host part,0.5,,//copy the host part,
"strncpy(host,url+pos,myhost-pos);",0.0,"strncpy(host,url+pos,myhost-pos);",,
host[myhost-pos] =0;,0.0,host[myhost-pos] =0;,,
,0.0,,,
//copy the port part,0.5,,//copy the port part,
if(myport != -1){,0.0,if(myport != -1){,,
"strncpy(port,url+myhost+1,myport-(myhost+1));",0.0,"strncpy(port,url+myhost+1,myport-(myhost+1));",,
port[myport-(myhost+1)] = 0;,0.0,port[myport-(myhost+1)] = 0;,,
},0.0,},,
else{,0.0,else{,,
"strncpy(port,eighty,2);",0.0,"strncpy(port,eighty,2);",,
port[2] = 0;,0.0,port[2] = 0;,,
},0.0,},,
,0.0,,,
//copy the path part,0.5,,//copy the path part,
if(mypath == 0){,0.0,if(mypath == 0){,,
"strncpy(path,url+myhost,len-myhost);",0.0,"strncpy(path,url+myhost,len-myhost);",,
path[len-myhost] = 0;,0.0,path[len-myhost] = 0;,,
},0.0,},,
else{,0.0,else{,,
if(mypath == 1){,0.0,if(mypath == 1){,,
"strncpy(path,url+myport,len-myport);",0.0,"strncpy(path,url+myport,len-myport);",,
path[len-myport] = 0;,0.0,path[len-myport] = 0;,,
},0.0,},,
,0.0,,,
else{,0.0,else{,,
"strncpy(path,slash,1);",0.0,"strncpy(path,slash,1);",,
path[1] = 0;,0.0,path[1] = 0;,,
},0.0,},,
},0.0,},,
return 1;,0.0,return 1;,,
},0.0,},,
