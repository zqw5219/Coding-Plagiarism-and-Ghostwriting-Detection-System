originalCode,typeIndicator,pureCode,pureComment,pureMacro
/*,1.0,,/*,
* CS:APP Data Lab,1.0,,* CS:APP Data Lab,
*,1.0,,*,
* <JING TANG jjt5556>,1.0,,* <JING TANG jjt5556>,
*,1.0,,*,
* bits.c - Source file with your solutions to the Lab.,1.0,,* bits.c - Source file with your solutions to the Lab.,
*          This is the file you will hand in to your instructor.,1.0,,*          This is the file you will hand in to your instructor.,
*,1.0,,*,
* WARNING: Do not include the <stdio.h> header; it confuses the dlc,1.0,,* WARNING: Do not include the <stdio.h> header; it confuses the dlc,
* compiler. You can still use printf for debugging without including,1.0,,* compiler. You can still use printf for debugging without including,
"* <stdio.h>, although you might get a compiler warning. In general,",1.0,,"* <stdio.h>, although you might get a compiler warning. In general,",
"* it's not good practice to ignore compiler warnings, but in this",1.0,,"* it's not good practice to ignore compiler warnings, but in this",
* case it's OK.,1.0,,* case it's OK.,
*/,0.0,*/,,
,0.0,,,
#if 0,2.0,,,#if 0
/*,1.0,,/*,
* Instructions to Students:,1.0,,* Instructions to Students:,
*,1.0,,*,
* STEP 1: Read the following instructions carefully.,1.0,,* STEP 1: Read the following instructions carefully.,
*/,2.0,,,*/
,2.0,,,
You will provide your solution to the Data Lab by,2.0,,,You will provide your solution to the Data Lab by
editing the collection of functions in this source file.,2.0,,,editing the collection of functions in this source file.
,2.0,,,
INTEGER CODING RULES:,2.0,,,INTEGER CODING RULES:
,2.0,,,
"Replace the ""return"" statement in each function with one",2.0,,,"Replace the ""return"" statement in each function with one"
or more lines of C code that implements the function. Your code,2.0,,,or more lines of C code that implements the function. Your code
must conform to the following style:,2.0,,,must conform to the following style:
,2.0,,,
"int Funct(arg1, arg2, ...) {",2.0,,,"int Funct(arg1, arg2, ...) {"
/* brief description of how your implementation works */,1.0,,/* brief description of how your implementation works */,
int var1 = Expr1;,2.0,,,int var1 = Expr1;
...,2.0,,,...
int varM = ExprM;,2.0,,,int varM = ExprM;
,2.0,,,
varJ = ExprJ;,2.0,,,varJ = ExprJ;
...,2.0,,,...
varN = ExprN;,2.0,,,varN = ExprN;
return ExprR;,2.0,,,return ExprR;
},2.0,,,}
,2.0,,,
"Each ""Expr"" is an expression using ONLY the following:",2.0,,,"Each ""Expr"" is an expression using ONLY the following:"
"1. Integer constants 0 through 255 (0xFF), inclusive. You are",2.0,,,"1. Integer constants 0 through 255 (0xFF), inclusive. You are"
not allowed to use big constants such as 0xffffffff.,2.0,,,not allowed to use big constants such as 0xffffffff.
2. Function arguments and local variables (no global variables).,2.0,,,2. Function arguments and local variables (no global variables).
3. Unary integer operations ! ~,2.0,,,3. Unary integer operations ! ~
4. Binary integer operations & ^ | + << >>,2.0,,,4. Binary integer operations & ^ | + << >>
,2.0,,,
Some of the problems restrict the set of allowed operators even further.,2.0,,,Some of the problems restrict the set of allowed operators even further.
"Each ""Expr"" may consist of multiple operators. You are not restricted to",2.0,,,"Each ""Expr"" may consist of multiple operators. You are not restricted to"
one operator per line.,2.0,,,one operator per line.
,2.0,,,
You are expressly forbidden to:,2.0,,,You are expressly forbidden to:
"1. Use any control constructs such as if, do, while, for, switch, etc.",2.0,,,"1. Use any control constructs such as if, do, while, for, switch, etc."
2. Define or use any macros.,2.0,,,2. Define or use any macros.
3. Define any additional functions in this file.,2.0,,,3. Define any additional functions in this file.
4. Call any functions.,2.0,,,4. Call any functions.
"5. Use any other operations, such as &&, ||, -, or ?:",2.0,,,"5. Use any other operations, such as &&, ||, -, or ?:"
6. Use any form of casting.,2.0,,,6. Use any form of casting.
7. Use any data type other than int.  This implies that you,2.0,,,7. Use any data type other than int.  This implies that you
"cannot use arrays, structs, or unions.",2.0,,,"cannot use arrays, structs, or unions."
,2.0,,,
,2.0,,,
You may assume that your machine:,2.0,,,You may assume that your machine:
"1. Uses 2s complement, 32-bit representations of integers.",2.0,,,"1. Uses 2s complement, 32-bit representations of integers."
2. Performs right shifts arithmetically.,2.0,,,2. Performs right shifts arithmetically.
3. Has unpredictable behavior when shifting if the shift amount,2.0,,,3. Has unpredictable behavior when shifting if the shift amount
is less than 0 or greater than 31.,2.0,,,is less than 0 or greater than 31.
,2.0,,,
,2.0,,,
EXAMPLES OF ACCEPTABLE CODING STYLE:,2.0,,,EXAMPLES OF ACCEPTABLE CODING STYLE:
/*,1.0,,/*,
"* pow2plus1 - returns 2^x + 1, where 0 <= x <= 31",1.0,,"* pow2plus1 - returns 2^x + 1, where 0 <= x <= 31",
*/,2.0,,,*/
int pow2plus1(int x) {,2.0,,,int pow2plus1(int x) {
/* exploit ability of shifts to compute powers of 2 */,1.0,,/* exploit ability of shifts to compute powers of 2 */,
return (1 << x) + 1;,2.0,,,return (1 << x) + 1;
},2.0,,,}
,2.0,,,
/*,1.0,,/*,
"* pow2plus4 - returns 2^x + 4, where 0 <= x <= 31",1.0,,"* pow2plus4 - returns 2^x + 4, where 0 <= x <= 31",
*/,2.0,,,*/
int pow2plus4(int x) {,2.0,,,int pow2plus4(int x) {
/* exploit ability of shifts to compute powers of 2 */,1.0,,/* exploit ability of shifts to compute powers of 2 */,
int result = (1 << x);,2.0,,,int result = (1 << x);
result += 4;,2.0,,,result += 4;
return result;,2.0,,,return result;
},2.0,,,}
,2.0,,,
FLOATING POINT CODING RULES,2.0,,,FLOATING POINT CODING RULES
,2.0,,,
"For the problems that require you to implement floating-point operations,",2.0,,,"For the problems that require you to implement floating-point operations,"
the coding rules are less strict.  You are allowed to use looping and,2.0,,,the coding rules are less strict.  You are allowed to use looping and
conditional control.  You are allowed to use both ints and unsigneds.,2.0,,,conditional control.  You are allowed to use both ints and unsigneds.
"You can use arbitrary integer and unsigned constants. You can use any arithmetic,",2.0,,,"You can use arbitrary integer and unsigned constants. You can use any arithmetic,"
"logical, or comparison operations on int or unsigned data.",2.0,,,"logical, or comparison operations on int or unsigned data."
,2.0,,,
You are expressly forbidden to:,2.0,,,You are expressly forbidden to:
1. Define or use any macros.,2.0,,,1. Define or use any macros.
2. Define any additional functions in this file.,2.0,,,2. Define any additional functions in this file.
3. Call any functions.,2.0,,,3. Call any functions.
4. Use any form of casting.,2.0,,,4. Use any form of casting.
5. Use any data type other than int or unsigned.  This means that you,2.0,,,5. Use any data type other than int or unsigned.  This means that you
"cannot use arrays, structs, or unions.",2.0,,,"cannot use arrays, structs, or unions."
"6. Use any floating point data types, operations, or constants.",2.0,,,"6. Use any floating point data types, operations, or constants."
,2.0,,,
,2.0,,,
NOTES:,2.0,,,NOTES:
1. Use the dlc (data lab checker) compiler (described in the handout) to,2.0,,,1. Use the dlc (data lab checker) compiler (described in the handout) to
check the legality of your solutions.,2.0,,,check the legality of your solutions.
"2. Each function has a maximum number of operations (integer, logical,",2.0,,,"2. Each function has a maximum number of operations (integer, logical,"
or comparison) that you are allowed to use for your implementation,2.0,,,or comparison) that you are allowed to use for your implementation
of the function.  The max operator count is checked by dlc.,2.0,,,of the function.  The max operator count is checked by dlc.
Note that assignment ('=') is not counted; you may use as many of,2.0,,,Note that assignment ('=') is not counted; you may use as many of
these as you want without penalty.,2.0,,,these as you want without penalty.
3. Use the btest test harness to check your functions for correctness.,2.0,,,3. Use the btest test harness to check your functions for correctness.
4. Use the BDD checker to formally verify your functions,2.0,,,4. Use the BDD checker to formally verify your functions
5. The maximum number of ops for each function is given in the,2.0,,,5. The maximum number of ops for each function is given in the
header comment for each function. If there are any inconsistencies,2.0,,,header comment for each function. If there are any inconsistencies
"between the maximum ops in the writeup and in this file, consider",2.0,,,"between the maximum ops in the writeup and in this file, consider"
this file the authoritative source.,2.0,,,this file the authoritative source.
,2.0,,,
/*,1.0,,/*,
* STEP 2: Modify the following functions according the coding rules.,1.0,,* STEP 2: Modify the following functions according the coding rules.,
*,1.0,,*,
*   IMPORTANT. TO AVOID GRADING SURPRISES:,1.0,,*   IMPORTANT. TO AVOID GRADING SURPRISES:,
*   1. Use the dlc compiler to check that your solutions conform,1.0,,*   1. Use the dlc compiler to check that your solutions conform,
*      to the coding rules.,1.0,,*      to the coding rules.,
*   2. Use the BDD checker to formally verify that your solutions produce,1.0,,*   2. Use the BDD checker to formally verify that your solutions produce,
*      the correct answers.,1.0,,*      the correct answers.,
*/,2.0,,,*/
,2.0,,,
,2.0,,,
#endif,2.0,,,#endif
"/* Copyright (C) 1991-2012 Free Software Foundation, Inc.",1.0,,"/* Copyright (C) 1991-2012 Free Software Foundation, Inc.",
This file is part of the GNU C Library.,1.0,,This file is part of the GNU C Library.,
,1.0,,,
The GNU C Library is free software; you can redistribute it and/or,1.0,,The GNU C Library is free software; you can redistribute it and/or,
modify it under the terms of the GNU Lesser General Public,1.0,,modify it under the terms of the GNU Lesser General Public,
License as published by the Free Software Foundation; either,1.0,,License as published by the Free Software Foundation; either,
"version 2.1 of the License, or (at your option) any later version.",1.0,,"version 2.1 of the License, or (at your option) any later version.",
,1.0,,,
"The GNU C Library is distributed in the hope that it will be useful,",1.0,,"The GNU C Library is distributed in the hope that it will be useful,",
but WITHOUT ANY WARRANTY; without even the implied warranty of,1.0,,but WITHOUT ANY WARRANTY; without even the implied warranty of,
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU,1.0,,MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU,
Lesser General Public License for more details.,1.0,,Lesser General Public License for more details.,
,1.0,,,
You should have received a copy of the GNU Lesser General Public,1.0,,You should have received a copy of the GNU Lesser General Public,
"License along with the GNU C Library; if not, see",1.0,,"License along with the GNU C Library; if not, see",
<http://www.gnu.org/licenses/>.  */,0.0,<http://www.gnu.org/licenses/>.  */,,
/* This header is separate from features.h so that the compiler can,1.0,,/* This header is separate from features.h so that the compiler can,
include it implicitly at the start of every compilation.  It must,1.0,,include it implicitly at the start of every compilation.  It must,
not itself include <features.h> or any other header that includes,1.0,,not itself include <features.h> or any other header that includes,
<features.h> because the implicit include comes before any feature,1.0,,<features.h> because the implicit include comes before any feature,
test macros that may be defined in a source file before it first,1.0,,test macros that may be defined in a source file before it first,
explicitly includes a system header.  GCC knows the name of this,1.0,,explicitly includes a system header.  GCC knows the name of this,
header in order to preinclude it.  */,0.0,header in order to preinclude it.  */,,
"/* We do support the IEC 559 math functionality, real and complex.  */",1.0,,"/* We do support the IEC 559 math functionality, real and complex.  */",
"/* wchar_t uses ISO/IEC 10646 (2nd ed., published 2011-03-15) /",1.0,,"/* wchar_t uses ISO/IEC 10646 (2nd ed., published 2011-03-15) /",
Unicode 6.0.  */,0.0,Unicode 6.0.  */,,
/* We do not support C11 <threads.h>.  */,1.0,,/* We do not support C11 <threads.h>.  */,
/*,1.0,,/*,
* allEvenBits - return 1 if all even-numbered bits in word set to 1,1.0,,* allEvenBits - return 1 if all even-numbered bits in word set to 1,
*   where bits are numbered from 0 (least significant) to 31 (most significant),1.0,,*   where bits are numbered from 0 (least significant) to 31 (most significant),
"*   Examples allEvenBits(0xFFFFFFFE) = 0, allEvenBits(0x55555555) = 1",1.0,,"*   Examples allEvenBits(0xFFFFFFFE) = 0, allEvenBits(0x55555555) = 1",
*   Legal ops: ! ~ & ^ | + << >>,1.0,,*   Legal ops: ! ~ & ^ | + << >>,
*   Max ops: 12,1.0,,*   Max ops: 12,
*   Rating: 2,1.0,,*   Rating: 2,
*/,0.0,*/,,
,0.0,,,
//x&0x50505050 would mask all the odd-numbered bits,0.5,,//x&0x50505050 would mask all the odd-numbered bits,
//and then check the rest of the bits,0.5,,//and then check the rest of the bits,
//if the number after masking equals 0x50505050,0.5,,//if the number after masking equals 0x50505050,
//which means all even-numbered bits in word set to 1,0.5,,//which means all even-numbered bits in word set to 1,
int allEvenBits(int x) {,0.0,int allEvenBits(int x) {,,
int a = 0x55;,0.0,int a = 0x55;,,
a = (a<<8)|0x55;,0.0,a = (a<<8)|0x55;,,
a = (a<<8)|0x55;,0.0,a = (a<<8)|0x55;,,
a = (a<<8)|0x55;,0.0,a = (a<<8)|0x55;,,
return !((a&x)^a);,0.0,return !((a&x)^a);,,
},0.0,},,
,0.0,,,
,0.0,,,
/*,1.0,,/*,
* bang - Compute !x without using !,1.0,,* bang - Compute !x without using !,
"*   Examples: bang(3) = 0, bang(0) = 1",1.0,,"*   Examples: bang(3) = 0, bang(0) = 1",
*   Legal ops: ~ & ^ | + << >>,1.0,,*   Legal ops: ~ & ^ | + << >>,
*   Max ops: 12,1.0,,*   Max ops: 12,
*   Rating: 4,1.0,,*   Rating: 4,
*/,0.0,*/,,
,0.0,,,
//by getting the negative number of x and check its sign,0.5,,//by getting the negative number of x and check its sign,
//we could determine whether the number is 0 or not,0.5,,//we could determine whether the number is 0 or not,
//but it exclude the first bit,0.5,,//but it exclude the first bit,
//so I then check the first bit to determine whether it is 0 or not,0.5,,//so I then check the first bit to determine whether it is 0 or not,
"//if both parts are 0, return 0, which means there's no ""1""s at any",0.5,,"//if both parts are 0, return 0, which means there's no ""1""s at any",
//of the 32 bits,0.5,,//of the 32 bits,
,0.0,,,
int bang(int x) {,0.0,int bang(int x) {,,
int a = ~((~x+1)>>31)+1;,0.0,int a = ~((~x+1)>>31)+1;,,
int b = (x>>31)&0x1;,0.0,int b = (x>>31)&0x1;,,
int c = a|b;,0.0,int c = a|b;,,
c = c^0x1;,0.0,c = c^0x1;,,
return c;,0.0,return c;,,
},0.0,},,
,0.0,,,
/*,1.0,,/*,
* floatIsEqual - Compute f == g for floating point arguments f and g.,1.0,,* floatIsEqual - Compute f == g for floating point arguments f and g.,
"*   Both the arguments are passed as unsigned int's, but",1.0,,"*   Both the arguments are passed as unsigned int's, but",
*   they are to be interpreted as the bit-level representations of,1.0,,*   they are to be interpreted as the bit-level representations of,
*   single-precision floating point values.,1.0,,*   single-precision floating point values.,
"*   If either argument is NaN, return 0.",1.0,,"*   If either argument is NaN, return 0.",
*   +0 and -0 are considered equal.,1.0,,*   +0 and -0 are considered equal.,
"*   Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while",1.0,,"*   Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while",
*   Max ops: 25,1.0,,*   Max ops: 25,
*   Rating: 2,1.0,,*   Rating: 2,
*/,0.0,*/,,
,0.0,,,
//Exclude the situation of +0 and -0,0.5,,//Exclude the situation of +0 and -0,
//Exclude the situation that its exponent are all '1's and frac does not equal to zero,0.5,,//Exclude the situation that its exponent are all '1's and frac does not equal to zero,
//this situation does not exist,0.5,,//this situation does not exist,
"//After excluding these two situation, just simply compared the two numbers",0.5,,"//After excluding these two situation, just simply compared the two numbers",
,0.0,,,
"int floatIsEqual(unsigned uf, unsigned ug) {",0.0,"int floatIsEqual(unsigned uf, unsigned ug) {",,
"int a,b,c,d,eight,ff;",0.0,"int a,b,c,d,eight,ff;",,
eight = 0x1<<31;,0.0,eight = 0x1<<31;,,
ff = ~0x0;,0.0,ff = ~0x0;,,
if ((uf == 0x0)|(uf == eight)){,0.0,if ((uf == 0x0)|(uf == eight)){,,
if((ug == 0x0)|(ug == eight)){,0.0,if((ug == 0x0)|(ug == eight)){,,
return 1;,0.0,return 1;,,
},0.0,},,
},0.0,},,
a = uf<<1;,0.0,a = uf<<1;,,
a = a>>24;,0.0,a = a>>24;,,
b = uf<<9;,0.0,b = uf<<9;,,
b = b>>9;,0.0,b = b>>9;,,
c = ug<<1;,0.0,c = ug<<1;,,
c = c>>24;,0.0,c = c>>24;,,
d = ug<<9;,0.0,d = ug<<9;,,
d = ug>>9;,0.0,d = ug>>9;,,
if((a==ff)&& (b!=0)){,0.0,if((a==ff)&& (b!=0)){,,
if((c==ff)&&(d!=0)){,0.0,if((c==ff)&&(d!=0)){,,
return 0;,0.0,return 0;,,
},0.0,},,
},0.0,},,
if (uf == ug){,0.0,if (uf == ug){,,
return 1;,0.0,return 1;,,
},0.0,},,
else{,0.0,else{,,
return 0;,0.0,return 0;,,
},0.0,},,
},0.0,},,
,0.0,,,
/*,1.0,,/*,
* floatUnsigned2Float - Return bit-level equivalent of expression (float) u,1.0,,* floatUnsigned2Float - Return bit-level equivalent of expression (float) u,
"*   Result is returned as unsigned int, but",1.0,,"*   Result is returned as unsigned int, but",
*   it is to be interpreted as the bit-level representation of a,1.0,,*   it is to be interpreted as the bit-level representation of a,
*   single-precision floating point values.,1.0,,*   single-precision floating point values.,
"*   Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while",1.0,,"*   Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while",
*   Max ops: 30,1.0,,*   Max ops: 30,
*   Rating: 4,1.0,,*   Rating: 4,
*/,0.0,*/,,
,0.0,,,
"//Frist, find the first '1' in order to determine how much should E be",0.5,,"//Frist, find the first '1' in order to determine how much should E be",
"//if E is larger than 23, push the number to the right",0.5,,"//if E is larger than 23, push the number to the right",
//by comparing the digits which are overflowed to 1/2 to determine how to round the rest of the number,0.5,,//by comparing the digits which are overflowed to 1/2 to determine how to round the rest of the number,
"//if E is smaller than 23, mask the first '1' and push it to the left",0.5,,"//if E is smaller than 23, mask the first '1' and push it to the left",
"//add bias,which is 127 in this case to E to find the exponent and push it 23 digits left",0.5,,"//add bias,which is 127 in this case to E to find the exponent and push it 23 digits left",
//use or to combine the exponent and fraction part,0.5,,//use or to combine the exponent and fraction part,
,0.0,,,
unsigned floatUnsigned2Float(unsigned u) {,0.0,unsigned floatUnsigned2Float(unsigned u) {,,
"int one,bits,s,round,frac,result,mask,compare,pb,pd;",0.0,"int one,bits,s,round,frac,result,mask,compare,pb,pd;",,
one = 0x1<<31;,0.0,one = 0x1<<31;,,
s=1;,0.0,s=1;,,
if(u==0){,0.0,if(u==0){,,
return 0;,0.0,return 0;,,
},0.0,},,
bits = 31;,0.0,bits = 31;,,
while ((u &(0x1<<bits))==0){,0.0,while ((u &(0x1<<bits))==0){,,
bits = bits -1;,0.0,bits = bits -1;,,
},0.0,},,
if(bits > 23){,0.0,if(bits > 23){,,
s = bits - 23;,0.0,s = bits - 23;,,
frac = u>>s;,0.0,frac = u>>s;,,
mask = one >>(31-s);,0.0,mask = one >>(31-s);,,
mask = ~mask;,0.0,mask = ~mask;,,
round = u&mask;,0.0,round = u&mask;,,
},0.0,},,
else{,0.0,else{,,
frac = u<<(23-bits);,0.0,frac = u<<(23-bits);,,
round = 0;,0.0,round = 0;,,
},0.0,},,
mask = one >> 8;,0.0,mask = one >> 8;,,
mask = ~mask;,0.0,mask = ~mask;,,
frac = frac&mask;,0.0,frac = frac&mask;,,
result = ((bits+127)<<23)|frac;,0.0,result = ((bits+127)<<23)|frac;,,
compare = 0x1<<(s-1);,0.0,compare = 0x1<<(s-1);,,
pb = 0x1<<s;,0.0,pb = 0x1<<s;,,
pd = u&pb;,0.0,pd = u&pb;,,
if(round > compare){,0.0,if(round > compare){,,
result = result+1;,0.0,result = result+1;,,
},0.0,},,
if(round == compare){,0.0,if(round == compare){,,
if(pd !=0 ){,0.0,if(pd !=0 ){,,
result = result+1;,0.0,result = result+1;,,
},0.0,},,
},0.0,},,
return result;,0.0,return result;,,
},0.0,},,
/*,1.0,,/*,
"* isLess - if x < y  then return 1, else return 0",1.0,,"* isLess - if x < y  then return 1, else return 0",
"*   Example: isLess(4,5) = 1.",1.0,,"*   Example: isLess(4,5) = 1.",
*   Legal ops: ! ~ & ^ | + << >>,1.0,,*   Legal ops: ! ~ & ^ | + << >>,
*   Max ops: 24,1.0,,*   Max ops: 24,
*   Rating: 3,1.0,,*   Rating: 3,
*/,0.0,*/,,
,0.0,,,
//first determine whether x and y have the same sign or not,0.5,,//first determine whether x and y have the same sign or not,
"//if they have different sign, than only see the sign of x",0.5,,"//if they have different sign, than only see the sign of x",
"//if x is negative, x<if x is possitive, x>y",0.5,,"//if x is negative, x<if x is possitive, x>y",
"//if they have the same sign, then x-y must not be overflow",0.5,,"//if they have the same sign, then x-y must not be overflow",
//then check the sign of x-y,0.5,,//then check the sign of x-y,
"//if x-y<0, x<y",0.5,,"//if x-y<0, x<y",
"//if x-y>0, x>y",0.5,,"//if x-y>0, x>y",
,0.0,,,
"int isLess(int x, int y) {",0.0,"int isLess(int x, int y) {",,
"int a,c1,c2,c,y1;",0.0,"int a,c1,c2,c,y1;",,
int sign =(x^y)>>31;,0.0,int sign =(x^y)>>31;,,
sign = ~sign;,0.0,sign = ~sign;,,
y1 = ~y+1;,0.0,y1 = ~y+1;,,
a = x+y1;,0.0,a = x+y1;,,
a = !!(a>>31);,0.0,a = !!(a>>31);,,
c1 = sign&a;,0.0,c1 = sign&a;,,
c2 = (!sign)&(x>>31);,0.0,c2 = (!sign)&(x>>31);,,
c = c1|c2;,0.0,c = c1|c2;,,
return c;,0.0,return c;,,
},0.0,},,
/*,1.0,,/*,
"* isNonNegative - return 1 if x >= 0, return 0 otherwise",1.0,,"* isNonNegative - return 1 if x >= 0, return 0 otherwise",
*   Example: isNonNegative(-1) = 0.  isNonNegative(0) = 1.,1.0,,*   Example: isNonNegative(-1) = 0.  isNonNegative(0) = 1.,
*   Legal ops: ! ~ & ^ | + << >>,1.0,,*   Legal ops: ! ~ & ^ | + << >>,
*   Max ops: 6,1.0,,*   Max ops: 6,
*   Rating: 2,1.0,,*   Rating: 2,
*/,0.0,*/,,
,0.0,,,
//shift x 31 bits left would determine whether it is negative or not,0.5,,//shift x 31 bits left would determine whether it is negative or not,
"//if it is negative, return 0xffffffff;",0.5,,"//if it is negative, return 0xffffffff;",
"//if it is positive, return 0x00000000;",0.5,,"//if it is positive, return 0x00000000;",
"//then add 1 to it, negative number would return 0",0.5,,"//then add 1 to it, negative number would return 0",
//and nonnagative number would return 1,0.5,,//and nonnagative number would return 1,
,0.0,,,
int isNonNegative(int x) {,0.0,int isNonNegative(int x) {,,
int a = x >> 31;,0.0,int a = x >> 31;,,
return a+1;,0.0,return a+1;,,
},0.0,},,
/*,1.0,,/*,
"* isTmax - returns 1 if x is the maximum, two's complement number,",1.0,,"* isTmax - returns 1 if x is the maximum, two's complement number,",
*     and 0 otherwise,1.0,,*     and 0 otherwise,
*   Legal ops: ! ~ & ^ | +,1.0,,*   Legal ops: ! ~ & ^ | +,
*   Max ops: 10,1.0,,*   Max ops: 10,
*   Rating: 1,1.0,,*   Rating: 1,
*/,0.0,*/,,
,0.0,,,
//only 0x7fffffff and 0xffffffff satisfy the condition that x+1 = ~x,0.5,,//only 0x7fffffff and 0xffffffff satisfy the condition that x+1 = ~x,
//then exclude the situation of 0xffffffff,0.5,,//then exclude the situation of 0xffffffff,
int isTmax(int x) {,0.0,int isTmax(int x) {,,
"int a,b,c,d,f,g,h;",0.0,"int a,b,c,d,f,g,h;",,
a = ~x;,0.0,a = ~x;,,
b = x+1;,0.0,b = x+1;,,
c =!(a^b);,0.0,c =!(a^b);,,
d = ~0x0;,0.0,d = ~0x0;,,
f = x^d;,0.0,f = x^d;,,
g =!!f;,0.0,g =!!f;,,
h = c&g;,0.0,h = c&g;,,
return h;,0.0,return h;,,
},0.0,},,
/*,1.0,,/*,
* rotateLeft - Rotate x to the left by n,1.0,,* rotateLeft - Rotate x to the left by n,
*   Can assume that 0 <= n <= 31,1.0,,*   Can assume that 0 <= n <= 31,
"*   Examples: rotateLeft(0x87654321,4) = 0x76543218",1.0,,"*   Examples: rotateLeft(0x87654321,4) = 0x76543218",
*   Legal ops: ~ & ^ | + << >> !,1.0,,*   Legal ops: ~ & ^ | + << >> !,
*   Max ops: 25,1.0,,*   Max ops: 25,
*   Rating: 3,1.0,,*   Rating: 3,
*/,0.0,*/,,
"int rotateLeft(int x, int n) {",0.0,"int rotateLeft(int x, int n) {",,
"int a,b,c,d,e,bit;",0.0,"int a,b,c,d,e,bit;",,
bit =32+(~n+1);,0.0,bit =32+(~n+1);,,
a = x>>bit;,0.0,a = x>>bit;,,
b = 0x1<<31;,0.0,b = 0x1<<31;,,
e = ~0x0;,0.0,e = ~0x0;,,
b = b>>(bit+e);,0.0,b = b>>(bit+e);,,
b = ~b;,0.0,b = ~b;,,
a = a&b;,0.0,a = a&b;,,
c = x<<n;,0.0,c = x<<n;,,
d = a|c;,0.0,d = a|c;,,
return d;,0.0,return d;,,
},0.0,},,
/*,1.0,,/*,
* signMag2TwosComp - Convert from sign-magnitude to two's complement,1.0,,* signMag2TwosComp - Convert from sign-magnitude to two's complement,
*   where the MSB is the sign bit,1.0,,*   where the MSB is the sign bit,
*   Example: signMag2TwosComp(0x80000005) = -5.,1.0,,*   Example: signMag2TwosComp(0x80000005) = -5.,
*   Legal ops: ! ~ & ^ | + << >>,1.0,,*   Legal ops: ! ~ & ^ | + << >>,
*   Max ops: 15,1.0,,*   Max ops: 15,
*   Rating: 4,1.0,,*   Rating: 4,
*/,0.0,*/,,
,0.0,,,
//x&80000000 remains only the sign bit,0.5,,//x&80000000 remains only the sign bit,
"//use it to minus x, for negative number, it would directly get the 2's complement",0.5,,"//use it to minus x, for negative number, it would directly get the 2's complement",
//c&a would remain the result of negative number and turn the result of postive number to 0,0.5,,//c&a would remain the result of negative number and turn the result of postive number to 0,
//which would not affect the latter transition for positive number,0.5,,//which would not affect the latter transition for positive number,
"//for positive number, I use ~a&x to copy the number",0.5,,"//for positive number, I use ~a&x to copy the number",
"//and meanwhile, it would not affect the result of negative number",0.5,,"//and meanwhile, it would not affect the result of negative number",
,0.0,,,
int signMag2TwosComp(int x) {,0.0,int signMag2TwosComp(int x) {,,
"int a,b,c,d;",0.0,"int a,b,c,d;",,
a = x >> 31;,0.0,a = x >> 31;,,
b = ~a&x;,0.0,b = ~a&x;,,
c = 0x1<<31;,0.0,c = 0x1<<31;,,
c = (x&c)+(~x+1);,0.0,c = (x&c)+(~x+1);,,
c = c&a;,0.0,c = c&a;,,
d = c|b;,0.0,d = c|b;,,
return d;,0.0,return d;,,
},0.0,},,
/*,1.0,,/*,
* thirdBits - return word with every third bit (starting from the LSB) set to 1,1.0,,* thirdBits - return word with every third bit (starting from the LSB) set to 1,
*   Legal ops: ! ~ & ^ | + << >>,1.0,,*   Legal ops: ! ~ & ^ | + << >>,
*   Max ops: 8,1.0,,*   Max ops: 8,
*   Rating: 1,1.0,,*   Rating: 1,
*/,0.0,*/,,
,0.0,,,
"//for this case, the result is a paticular number, which is 0x49249249",0.5,,"//for this case, the result is a paticular number, which is 0x49249249",
//use shift to build the number,0.5,,//use shift to build the number,
int thirdBits(void) {,0.0,int thirdBits(void) {,,
int a = 0x49;,0.0,int a = 0x49;,,
a = (a<<8)|0x24;,0.0,a = (a<<8)|0x24;,,
a = (a<<8)|0x92;,0.0,a = (a<<8)|0x92;,,
a = (a<<8)|0x49;,0.0,a = (a<<8)|0x49;,,
return a;,0.0,return a;,,
},0.0,},,
