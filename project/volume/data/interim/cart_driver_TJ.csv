originalCode,typeIndicator,pureCode,pureComment,pureMacro
////////////////////////////////////////////////////////////////////////////////,0.5,,////////////////////////////////////////////////////////////////////////////////,
//,0.5,,//,
//  File           : cart_driver.c,0.5,,//  File           : cart_driver.c,
//  Description    : This is the implementation of the standardized IO functions,0.5,,//  Description    : This is the implementation of the standardized IO functions,
//                   for used to access the CART storage system.,0.5,,//                   for used to access the CART storage system.,
//,0.5,,//,
//  Author         : [Jing Tang],0.5,,//  Author         : [Jing Tang],
//  PSU email      : [jjt5556@psu.edu],0.5,,//  PSU email      : [jjt5556@psu.edu],
//,0.5,,//,
,0.0,,,
// Includes,0.5,,// Includes,
#include <stdlib.h>,0.0,#include <stdlib.h>,,
#include <string.h>,0.0,#include <string.h>,,
#include <stdio.h>,0.0,#include <stdio.h>,,
,0.0,,,
// Project Includes,0.5,,// Project Includes,
"#include ""cart_driver.h""",0.0,"#include ""cart_driver.h""",,
"#include ""cart_controller.h""",0.0,"#include ""cart_controller.h""",,
,0.0,,,
//initialize the stucture of file,0.5,,//initialize the stucture of file,
struct openfile{,0.0,struct openfile{,,
int file_size;,0.0,int file_size;,,
uint32_t file_pos;,0.0,uint32_t file_pos;,,
char *file_name;,0.0,char *file_name;,,
int frame_id[100];,0.0,int frame_id[100];,,
int cart_id[100];,0.0,int cart_id[100];,,
int status;,0.0,int status;,,
};,0.0,};,,
,0.0,,,
,0.0,,,
"//initialize counter for file, frame and cart",0.5,,"//initialize counter for file, frame and cart",
struct openfile cartlab[1024];,0.0,struct openfile cartlab[1024];,,
int fileCount = 0;,0.0,int fileCount = 0;,,
uint16_t  current_frame =-1;,0.0,uint16_t  current_frame =-1;,,
uint16_t current_cart = 0;,0.0,uint16_t current_cart = 0;,,
,0.0,,,
"//set up an opcode of 64 bits with data from ky1,ky2,rt1,ct1,fm1",0.5,,"//set up an opcode of 64 bits with data from ky1,ky2,rt1,ct1,fm1",
"CartXferRegister opcode(uint64_t ky1, uint64_t ky2, uint64_t rt1, uint64_t ct1, uint64_t fm1){",0.0,"CartXferRegister opcode(uint64_t ky1, uint64_t ky2, uint64_t rt1, uint64_t ct1, uint64_t fm1){",,
CartXferRegister opcode;,0.0,CartXferRegister opcode;,,
ky1 = ky1<<56;,0.0,ky1 = ky1<<56;,,
ky2 = ky2<<48;,0.0,ky2 = ky2<<48;,,
rt1 = rt1<<47;,0.0,rt1 = rt1<<47;,,
ct1 = ct1<<31;,0.0,ct1 = ct1<<31;,,
fm1 = fm1<<15;,0.0,fm1 = fm1<<15;,,
opcode = ky1|ky2|rt1|ct1|fm1;,0.0,opcode = ky1|ky2|rt1|ct1|fm1;,,
return opcode;,0.0,return opcode;,,
},0.0,},,
,0.0,,,
//check rt1 sent back by kernel to make sure the process is successful,0.5,,//check rt1 sent back by kernel to make sure the process is successful,
int issuccessful(CartXferRegister respond){,0.0,int issuccessful(CartXferRegister respond){,,
int rt1;,0.0,int rt1;,,
rt1 =(respond >> 47)&0x1;,0.0,rt1 =(respond >> 47)&0x1;,,
if(rt1 == 0){,0.0,if(rt1 == 0){,,
return 0;,0.0,return 0;,,
},0.0,},,
else{,0.0,else{,,
return -1;,0.0,return -1;,,
},0.0,},,
},0.0,},,
,0.0,,,
,0.0,,,
//,0.5,,//,
// Implementation,0.5,,// Implementation,
,0.0,,,
////////////////////////////////////////////////////////////////////////////////,0.5,,////////////////////////////////////////////////////////////////////////////////,
//,0.5,,//,
// Function     : cart_poweron,0.5,,// Function     : cart_poweron,
"// Description  : Startup up the CART interface, initialize filesystem",0.5,,"// Description  : Startup up the CART interface, initialize filesystem",
//,0.5,,//,
// Inputs       : none,0.5,,// Inputs       : none,
"// Outputs      : 0 if successful, -1 if failure",0.5,,"// Outputs      : 0 if successful, -1 if failure",
,0.0,,,
int32_t cart_poweron(void) {,0.0,int32_t cart_poweron(void) {,,
int result;,0.0,int result;,,
int i;,0.0,int i;,,
"CartXferRegister initms,bzero,ldcart;",0.0,"CartXferRegister initms,bzero,ldcart;",,
"CartXferRegister respond1,respond2,respond3;",0.0,"CartXferRegister respond1,respond2,respond3;",,
,0.0,,,
//cart_op_initms,0.5,,//cart_op_initms,
"initms = opcode(CART_OP_INITMS,0,0,0,0);",0.0,"initms = opcode(CART_OP_INITMS,0,0,0,0);",,
"respond1 = cart_io_bus(initms,NULL);",0.0,"respond1 = cart_io_bus(initms,NULL);",,
if((result = issuccessful(respond1))==-1){,0.0,if((result = issuccessful(respond1))==-1){,,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
for(i=0;i<CART_MAX_CARTRIDGES;i++){,0.0,for(i=0;i<CART_MAX_CARTRIDGES;i++){,,
//cart_op_ldcart,0.5,,//cart_op_ldcart,
"ldcart = opcode(CART_OP_LDCART,0,0,i,0);",0.0,"ldcart = opcode(CART_OP_LDCART,0,0,i,0);",,
"respond3 = cart_io_bus(ldcart,NULL);",0.0,"respond3 = cart_io_bus(ldcart,NULL);",,
if((result = issuccessful(respond3))==-1){,0.0,if((result = issuccessful(respond3))==-1){,,
return -1;,0.0,return -1;,,
},0.0,},,
//cart_op_bzero,0.5,,//cart_op_bzero,
"bzero = opcode(CART_OP_BZERO,0,0,0,0);",0.0,"bzero = opcode(CART_OP_BZERO,0,0,0,0);",,
"respond2 = cart_io_bus(bzero,NULL);",0.0,"respond2 = cart_io_bus(bzero,NULL);",,
if((result = issuccessful(respond2))==-1){,0.0,if((result = issuccessful(respond2))==-1){,,
return -1;,0.0,return -1;,,
},0.0,},,
},0.0,},,
// Return successfully,0.5,,// Return successfully,
return(0);,0.0,return(0);,,
},0.0,},,
,0.0,,,
////////////////////////////////////////////////////////////////////////////////,0.5,,////////////////////////////////////////////////////////////////////////////////,
//,0.5,,//,
// Function     : cart_poweroff,0.5,,// Function     : cart_poweroff,
"// Description  : Shut down the CART interface, close all files",0.5,,"// Description  : Shut down the CART interface, close all files",
//,0.5,,//,
// Inputs       : none,0.5,,// Inputs       : none,
"// Outputs      : 0 if successful, -1 if failure",0.5,,"// Outputs      : 0 if successful, -1 if failure",
,0.0,,,
int32_t cart_poweroff(void) {,0.0,int32_t cart_poweroff(void) {,,
int result;,0.0,int result;,,
int i;,0.0,int i;,,
CartXferRegister powoff;,0.0,CartXferRegister powoff;,,
CartXferRegister respond;,0.0,CartXferRegister respond;,,
,0.0,,,
//clean file,0.5,,//clean file,
for(i=0;i<fileCount;i++){,0.0,for(i=0;i<fileCount;i++){,,
if(cartlab[i].status == 1){,0.0,if(cartlab[i].status == 1){,,
cart_close(i);,0.0,cart_close(i);,,
},0.0,},,
},0.0,},,
,0.0,,,
//power off,0.5,,//power off,
"powoff = opcode(CART_OP_POWOFF,0,0,0,0);",0.0,"powoff = opcode(CART_OP_POWOFF,0,0,0,0);",,
"respond = cart_io_bus(powoff,NULL);",0.0,"respond = cart_io_bus(powoff,NULL);",,
if((result = issuccessful(respond))==-1){,0.0,if((result = issuccessful(respond))==-1){,,
return -1;,0.0,return -1;,,
},0.0,},,
// Return successfully,0.5,,// Return successfully,
return(0);,0.0,return(0);,,
},0.0,},,
,0.0,,,
////////////////////////////////////////////////////////////////////////////////,0.5,,////////////////////////////////////////////////////////////////////////////////,
//,0.5,,//,
// Function     : cart_open,0.5,,// Function     : cart_open,
// Description  : This function opens the file and returns a file handle,0.5,,// Description  : This function opens the file and returns a file handle,
//,0.5,,//,
// Inputs       : path - filename of the file to open,0.5,,// Inputs       : path - filename of the file to open,
"// Outputs      : file handle if successful, -1 if failure",0.5,,"// Outputs      : file handle if successful, -1 if failure",
,0.0,,,
int16_t cart_open(char *path) {,0.0,int16_t cart_open(char *path) {,,
//check the length of name,0.5,,//check the length of name,
if(strlen(path)>128){,0.0,if(strlen(path)>128){,,
return -1;,0.0,return -1;,,
},0.0,},,
int i;,0.0,int i;,,
,0.0,,,
//if the file exist and the file is close,0.5,,//if the file exist and the file is close,
//set status to open and postion to 0,0.5,,//set status to open and postion to 0,
if(fileCount!=0){,0.0,if(fileCount!=0){,,
for(i=0;i<fileCount;i++){,0.0,for(i=0;i<fileCount;i++){,,
"if(strcmp(cartlab[i].file_name,path)==0){",0.0,"if(strcmp(cartlab[i].file_name,path)==0){",,
if(cartlab[i].status == 1){,0.0,if(cartlab[i].status == 1){,,
return -1;,0.0,return -1;,,
},0.0,},,
else{,0.0,else{,,
cartlab[i].status = 1;,0.0,cartlab[i].status = 1;,,
cartlab[i].file_pos =0;,0.0,cartlab[i].file_pos =0;,,
return i;,0.0,return i;,,
},0.0,},,
},0.0,},,
},0.0,},,
},0.0,},,
,0.0,,,
//if the file does not exist,0.5,,//if the file does not exist,
//initialize every varible,0.5,,//initialize every varible,
//file counter plus 1 and set it to a new frame,0.5,,//file counter plus 1 and set it to a new frame,
"//if the frane counter is 1024, cart go to the next one",0.5,,"//if the frane counter is 1024, cart go to the next one",
cartlab[fileCount].file_name = path;,0.0,cartlab[fileCount].file_name = path;,,
cartlab[fileCount].file_size = 0;,0.0,cartlab[fileCount].file_size = 0;,,
cartlab[fileCount].status = 1;,0.0,cartlab[fileCount].status = 1;,,
cartlab[fileCount].file_pos = 0;,0.0,cartlab[fileCount].file_pos = 0;,,
,0.0,,,
fileCount++;,0.0,fileCount++;,,
current_frame++;,0.0,current_frame++;,,
if(current_frame == 1024){,0.0,if(current_frame == 1024){,,
current_cart++;,0.0,current_cart++;,,
current_frame=0;,0.0,current_frame=0;,,
},0.0,},,
// THIS SHOULD RETURN A FILE HANDLE,0.5,,// THIS SHOULD RETURN A FILE HANDLE,
return fileCount-1;,0.0,return fileCount-1;,,
},0.0,},,
,0.0,,,
////////////////////////////////////////////////////////////////////////////////,0.5,,////////////////////////////////////////////////////////////////////////////////,
//,0.5,,//,
// Function     : cart_close,0.5,,// Function     : cart_close,
// Description  : This function closes the file,0.5,,// Description  : This function closes the file,
//,0.5,,//,
// Inputs       : fd - the file descriptor,0.5,,// Inputs       : fd - the file descriptor,
"// Outputs      : 0 if successful, -1 if failure",0.5,,"// Outputs      : 0 if successful, -1 if failure",
,0.0,,,
int16_t cart_close(int16_t fd) {,0.0,int16_t cart_close(int16_t fd) {,,
//check fd and current status,0.5,,//check fd and current status,
if(fd < 0){,0.0,if(fd < 0){,,
return -1;,0.0,return -1;,,
},0.0,},,
if(fd > fileCount){,0.0,if(fd > fileCount){,,
return -1;,0.0,return -1;,,
},0.0,},,
if(cartlab[fd].status == 0){,0.0,if(cartlab[fd].status == 0){,,
return -1;,0.0,return -1;,,
},0.0,},,
//change status to close,0.5,,//change status to close,
cartlab[fd].status = 0;,0.0,cartlab[fd].status = 0;,,
// Return successfully,0.5,,// Return successfully,
return (0);,0.0,return (0);,,
},0.0,},,
,0.0,,,
////////////////////////////////////////////////////////////////////////////////,0.5,,////////////////////////////////////////////////////////////////////////////////,
//,0.5,,//,
// Function     : cart_read,0.5,,// Function     : cart_read,
"// Description  : Reads ""count"" bytes from the file handle ""fh"" into the",0.5,,"// Description  : Reads ""count"" bytes from the file handle ""fh"" into the",
"//                buffer ""buf""",0.5,,"//                buffer ""buf""",
//,0.5,,//,
// Inputs       : fd - filename of the file to read from,0.5,,// Inputs       : fd - filename of the file to read from,
//                buf - pointer to buffer to read into,0.5,,//                buf - pointer to buffer to read into,
//                count - number of bytes to read,0.5,,//                count - number of bytes to read,
"// Outputs      : bytes read if successful, -1 if failure",0.5,,"// Outputs      : bytes read if successful, -1 if failure",
,0.0,,,
"int32_t cart_read(int16_t fd, void *buf, int32_t count) {",0.0,"int32_t cart_read(int16_t fd, void *buf, int32_t count) {",,
int cid;,0.0,int cid;,,
int fid;,0.0,int fid;,,
char buf1[1024];,0.0,char buf1[1024];,,
int ipos;,0.0,int ipos;,,
int i;,0.0,int i;,,
int c;,0.0,int c;,,
"CartXferRegister ldcart,rdfrme;",0.0,"CartXferRegister ldcart,rdfrme;",,
"CartXferRegister respond1,respond2;",0.0,"CartXferRegister respond1,respond2;",,
int fcount;,0.0,int fcount;,,
int result;,0.0,int result;,,
int cpos = 0;,0.0,int cpos = 0;,,
int bpos = 0;,0.0,int bpos = 0;,,
int iframe;,0.0,int iframe;,,
int32_t remain = count;,0.0,int32_t remain = count;,,
,0.0,,,
//get the start frame and state position,0.5,,//get the start frame and state position,
ipos = cartlab[fd].file_pos;,0.0,ipos = cartlab[fd].file_pos;,,
iframe = ipos/1024;,0.0,iframe = ipos/1024;,,
,0.0,,,
//check fd and status,0.5,,//check fd and status,
if(fd<0){,0.0,if(fd<0){,,
return -1;,0.0,return -1;,,
},0.0,},,
if(fd>fileCount){,0.0,if(fd>fileCount){,,
return -1;,0.0,return -1;,,
},0.0,},,
if(cartlab[fd].status == 0){,0.0,if(cartlab[fd].status == 0){,,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
//check whether the count the user want to read is over the size of file,0.5,,//check whether the count the user want to read is over the size of file,
"//if it is larger than the size, only read to the end of the file",0.5,,"//if it is larger than the size, only read to the end of the file",
if(ipos+count > cartlab[fd].file_size){,0.0,if(ipos+count > cartlab[fd].file_size){,,
remain = cartlab[fd].file_size - cartlab[fd].file_pos;,0.0,remain = cartlab[fd].file_size - cartlab[fd].file_pos;,,
},0.0,},,
,0.0,,,
//calculate how many frames the user want to read,0.5,,//calculate how many frames the user want to read,
fcount = ((ipos%1024)+remain)/1024;,0.0,fcount = ((ipos%1024)+remain)/1024;,,
,0.0,,,
"//if there's only one frame,simply copy the frame to the buf1",0.5,,"//if there's only one frame,simply copy the frame to the buf1",
//select the part user want to buf,0.5,,//select the part user want to buf,
//move position to current postion,0.5,,//move position to current postion,
if(fcount==0){,0.0,if(fcount==0){,,
cpos = ipos%1024;,0.0,cpos = ipos%1024;,,
cid = cartlab[fd].cart_id[iframe];,0.0,cid = cartlab[fd].cart_id[iframe];,,
fid = cartlab[fd].frame_id[iframe];,0.0,fid = cartlab[fd].frame_id[iframe];,,
,0.0,,,
"ldcart = opcode(CART_OP_LDCART,0,0,cid,0);",0.0,"ldcart = opcode(CART_OP_LDCART,0,0,cid,0);",,
"respond1 = cart_io_bus(ldcart,NULL);",0.0,"respond1 = cart_io_bus(ldcart,NULL);",,
if((result = issuccessful(respond1))==-1){,0.0,if((result = issuccessful(respond1))==-1){,,
return -1;,0.0,return -1;,,
},0.0,},,
"rdfrme = opcode(CART_OP_RDFRME,0,0,0,fid);",0.0,"rdfrme = opcode(CART_OP_RDFRME,0,0,0,fid);",,
"respond2 = cart_io_bus(rdfrme,buf1);",0.0,"respond2 = cart_io_bus(rdfrme,buf1);",,
if((result = issuccessful(respond2))==-1){,0.0,if((result = issuccessful(respond2))==-1){,,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
"memcpy(buf+0,buf1+cpos,remain);",0.0,"memcpy(buf+0,buf1+cpos,remain);",,
cartlab[fd].file_pos += remain;,0.0,cartlab[fd].file_pos += remain;,,
return remain;,0.0,return remain;,,
},0.0,},,
,0.0,,,
//if there are more than one file,0.5,,//if there are more than one file,
else{,0.0,else{,,
,0.0,,,
//treat the first frame almost the same as only one frame,0.5,,//treat the first frame almost the same as only one frame,
//just read to the end of this frame,0.5,,//just read to the end of this frame,
//cpos is the postion of start position in current frame,0.5,,//cpos is the postion of start position in current frame,
cpos = ipos%1024;,0.0,cpos = ipos%1024;,,
c = 1024-cpos;,0.0,c = 1024-cpos;,,
,0.0,,,
cid = cartlab[fd].cart_id[iframe];,0.0,cid = cartlab[fd].cart_id[iframe];,,
fid = cartlab[fd].frame_id[iframe];,0.0,fid = cartlab[fd].frame_id[iframe];,,
,0.0,,,
"ldcart = opcode(CART_OP_LDCART,0,0,cid,0);",0.0,"ldcart = opcode(CART_OP_LDCART,0,0,cid,0);",,
"respond1 = cart_io_bus(ldcart,NULL);",0.0,"respond1 = cart_io_bus(ldcart,NULL);",,
if((result = issuccessful(respond1))==-1){,0.0,if((result = issuccessful(respond1))==-1){,,
return -1;,0.0,return -1;,,
},0.0,},,
"rdfrme = opcode(CART_OP_RDFRME,0,0,0,fid);",0.0,"rdfrme = opcode(CART_OP_RDFRME,0,0,0,fid);",,
"respond2 = cart_io_bus(rdfrme,buf1);",0.0,"respond2 = cart_io_bus(rdfrme,buf1);",,
if((result = issuccessful(respond2))==-1){,0.0,if((result = issuccessful(respond2))==-1){,,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
//copy the frame out to bu1 and select from state position to copy to buf,0.5,,//copy the frame out to bu1 and select from state position to copy to buf,
//adjust the postion,0.5,,//adjust the postion,
//adjust the postion in buf,0.5,,//adjust the postion in buf,
//reduce the left bytes,0.5,,//reduce the left bytes,
//move to next frame used by this file,0.5,,//move to next frame used by this file,
"memcpy(buf,buf1+cpos,c);",0.0,"memcpy(buf,buf1+cpos,c);",,
cartlab[fd].file_pos += c;,0.0,cartlab[fd].file_pos += c;,,
bpos += c;,0.0,bpos += c;,,
remain -= c;,0.0,remain -= c;,,
iframe += 1;,0.0,iframe += 1;,,
,0.0,,,
,0.0,,,
for(i=1;i<fcount+1;i++){,0.0,for(i=1;i<fcount+1;i++){,,
//cart_op_ldcart,0.5,,//cart_op_ldcart,
cid = cartlab[fd].cart_id[iframe];,0.0,cid = cartlab[fd].cart_id[iframe];,,
fid = cartlab[fd].frame_id[iframe];,0.0,fid = cartlab[fd].frame_id[iframe];,,
,0.0,,,
"//if the left bytes is less than 1024,which means it is the last frame",0.5,,"//if the left bytes is less than 1024,which means it is the last frame",
//copy from the start of this frame and end at the remain count,0.5,,//copy from the start of this frame and end at the remain count,
//adjust the position,0.5,,//adjust the position,
if(remain<=1024){,0.0,if(remain<=1024){,,
"ldcart = opcode(CART_OP_LDCART,0,0,cid,0);",0.0,"ldcart = opcode(CART_OP_LDCART,0,0,cid,0);",,
"respond1 = cart_io_bus(ldcart,NULL);",0.0,"respond1 = cart_io_bus(ldcart,NULL);",,
if((result = issuccessful(respond1))==-1){,0.0,if((result = issuccessful(respond1))==-1){,,
return -1;,0.0,return -1;,,
},0.0,},,
"rdfrme = opcode(CART_OP_RDFRME,0,0,0,fid);",0.0,"rdfrme = opcode(CART_OP_RDFRME,0,0,0,fid);",,
"respond2 = cart_io_bus(rdfrme,buf1);",0.0,"respond2 = cart_io_bus(rdfrme,buf1);",,
if((result = issuccessful(respond2))==-1){,0.0,if((result = issuccessful(respond2))==-1){,,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
"memcpy(buf+bpos,buf1,remain);",0.0,"memcpy(buf+bpos,buf1,remain);",,
,0.0,,,
cartlab[fd].file_pos += remain;,0.0,cartlab[fd].file_pos += remain;,,
return count;,0.0,return count;,,
},0.0,},,
//if the frame is either the first one or the last one,0.5,,//if the frame is either the first one or the last one,
//read all 1024 bytes in this frame,0.5,,//read all 1024 bytes in this frame,
//adjust current position,0.5,,//adjust current position,
//adjust postion in buf,0.5,,//adjust postion in buf,
//move to next frame used by this file,0.5,,//move to next frame used by this file,
else{,0.0,else{,,
"ldcart = opcode(CART_OP_LDCART,0,0,cid,0);",0.0,"ldcart = opcode(CART_OP_LDCART,0,0,cid,0);",,
"respond1 = cart_io_bus(ldcart,NULL);",0.0,"respond1 = cart_io_bus(ldcart,NULL);",,
if((result = issuccessful(respond1))==-1){,0.0,if((result = issuccessful(respond1))==-1){,,
return -1;,0.0,return -1;,,
},0.0,},,
"rdfrme = opcode(CART_OP_RDFRME,0,0,0,fid);",0.0,"rdfrme = opcode(CART_OP_RDFRME,0,0,0,fid);",,
"respond2 = cart_io_bus(rdfrme,buf1);",0.0,"respond2 = cart_io_bus(rdfrme,buf1);",,
if((result = issuccessful(respond2))==-1){,0.0,if((result = issuccessful(respond2))==-1){,,
return -1;,0.0,return -1;,,
},0.0,},,
"memcpy(buf+bpos,buf1,1024);",0.0,"memcpy(buf+bpos,buf1,1024);",,
bpos += 1024;,0.0,bpos += 1024;,,
remain -= 1024;,0.0,remain -= 1024;,,
cartlab[fd].file_pos += 1024;,0.0,cartlab[fd].file_pos += 1024;,,
iframe+=1;,0.0,iframe+=1;,,
},0.0,},,
},0.0,},,
},0.0,},,
// Return successfully,0.5,,// Return successfully,
return (count);,0.0,return (count);,,
},0.0,},,
,0.0,,,
////////////////////////////////////////////////////////////////////////////////,0.5,,////////////////////////////////////////////////////////////////////////////////,
//,0.5,,//,
// Function     : cart_write,0.5,,// Function     : cart_write,
"// Description  : Writes ""count"" bytes to the file handle ""fh"" from the",0.5,,"// Description  : Writes ""count"" bytes to the file handle ""fh"" from the",
"//                buffer  ""buf""",0.5,,"//                buffer  ""buf""",
//,0.5,,//,
// Inputs       : fd - filename of the file to write to,0.5,,// Inputs       : fd - filename of the file to write to,
//                buf - pointer to buffer to write from,0.5,,//                buf - pointer to buffer to write from,
//                count - number of bytes to write,0.5,,//                count - number of bytes to write,
"// Outputs      : bytes written if successful, -1 if failure",0.5,,"// Outputs      : bytes written if successful, -1 if failure",
,0.0,,,
"int32_t cart_write(int16_t fd, void *buf, int32_t count) {",0.0,"int32_t cart_write(int16_t fd, void *buf, int32_t count) {",,
// int cid;,0.5,,// int cid;,
// int fid;,0.5,,// int fid;,
char buf1[1024];,0.0,char buf1[1024];,,
int cid;,0.0,int cid;,,
int fid;,0.0,int fid;,,
int bpos=0;,0.0,int bpos=0;,,
int ipos=0;,0.0,int ipos=0;,,
int i;,0.0,int i;,,
int c;,0.0,int c;,,
"CartXferRegister ldcart,rdfrme,wrfrme;",0.0,"CartXferRegister ldcart,rdfrme,wrfrme;",,
"CartXferRegister respond1,respond2,respond3;",0.0,"CartXferRegister respond1,respond2,respond3;",,
int fcount=0;,0.0,int fcount=0;,,
int result;,0.0,int result;,,
int cpos = 0;,0.0,int cpos = 0;,,
int iframe;,0.0,int iframe;,,
int32_t remain = count;,0.0,int32_t remain = count;,,
,0.0,,,
//get the current position and current frame,0.5,,//get the current position and current frame,
//calculate how many frames may use,0.5,,//calculate how many frames may use,
ipos = cartlab[fd].file_pos;,0.0,ipos = cartlab[fd].file_pos;,,
fcount = ((ipos%1024)+count)/1024;,0.0,fcount = ((ipos%1024)+count)/1024;,,
iframe = ipos/1024;,0.0,iframe = ipos/1024;,,
,0.0,,,
//check fd and status,0.5,,//check fd and status,
if(fd<0){,0.0,if(fd<0){,,
return -1;,0.0,return -1;,,
},0.0,},,
if(fd>fileCount){,0.0,if(fd>fileCount){,,
return -1;,0.0,return -1;,,
},0.0,},,
if(cartlab[fd].status ==0){,0.0,if(cartlab[fd].status ==0){,,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
//if the file haven't been written yet,0.5,,//if the file haven't been written yet,
//give it a new frame and the corresponding cart,0.5,,//give it a new frame and the corresponding cart,
if(cartlab[fd].file_size == 0 && cartlab[fd].file_pos == 0){,0.0,if(cartlab[fd].file_size == 0 && cartlab[fd].file_pos == 0){,,
cartlab[fd].frame_id[0] = current_frame;,0.0,cartlab[fd].frame_id[0] = current_frame;,,
cartlab[fd].cart_id[0] = current_cart;,0.0,cartlab[fd].cart_id[0] = current_cart;,,
},0.0,},,
,0.0,,,
//if it only use one frame,0.5,,//if it only use one frame,
//get the frame id and cart id,0.5,,//get the frame id and cart id,
//read the corresponding frame and write new staff into it,0.5,,//read the corresponding frame and write new staff into it,
//put it back to the frame,0.5,,//put it back to the frame,
//adjust the size of the file,0.5,,//adjust the size of the file,
if(fcount==0){,0.0,if(fcount==0){,,
cpos = ipos%1024;,0.0,cpos = ipos%1024;,,
cid = cartlab[fd].cart_id[iframe];,0.0,cid = cartlab[fd].cart_id[iframe];,,
fid = cartlab[fd].frame_id[iframe];,0.0,fid = cartlab[fd].frame_id[iframe];,,
,0.0,,,
"ldcart = opcode(CART_OP_LDCART,0,0,cid,0);",0.0,"ldcart = opcode(CART_OP_LDCART,0,0,cid,0);",,
"respond1 = cart_io_bus(ldcart,NULL);",0.0,"respond1 = cart_io_bus(ldcart,NULL);",,
if((result = issuccessful(respond1))==-1){,0.0,if((result = issuccessful(respond1))==-1){,,
return -1;,0.0,return -1;,,
},0.0,},,
"rdfrme = opcode(CART_OP_RDFRME,0,0,0,fid);",0.0,"rdfrme = opcode(CART_OP_RDFRME,0,0,0,fid);",,
"respond2 = cart_io_bus(rdfrme,buf1);",0.0,"respond2 = cart_io_bus(rdfrme,buf1);",,
if((result = issuccessful(respond2))==-1){,0.0,if((result = issuccessful(respond2))==-1){,,
return -1;,0.0,return -1;,,
},0.0,},,
"memcpy(buf1+cpos,buf,count);",0.0,"memcpy(buf1+cpos,buf,count);",,
,0.0,,,
"wrfrme = opcode(CART_OP_WRFRME,0,0,0,fid);",0.0,"wrfrme = opcode(CART_OP_WRFRME,0,0,0,fid);",,
"respond3 = cart_io_bus(wrfrme,buf1);",0.0,"respond3 = cart_io_bus(wrfrme,buf1);",,
if((result = issuccessful(respond3))==-1){,0.0,if((result = issuccessful(respond3))==-1){,,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
cartlab[fd].file_pos = cartlab[fd].file_pos + count;,0.0,cartlab[fd].file_pos = cartlab[fd].file_pos + count;,,
if(cartlab[fd].file_size < cartlab[fd].file_pos){,0.0,if(cartlab[fd].file_size < cartlab[fd].file_pos){,,
cartlab[fd].file_size = cartlab[fd].file_pos;,0.0,cartlab[fd].file_size = cartlab[fd].file_pos;,,
},0.0,},,
else{,0.0,else{,,
cartlab[fd].file_size = cartlab[fd].file_size;,0.0,cartlab[fd].file_size = cartlab[fd].file_size;,,
},0.0,},,
},0.0,},,
,0.0,,,
//if there's more than one frame,0.5,,//if there's more than one frame,
//treat the first frame almost the same as only one frame,0.5,,//treat the first frame almost the same as only one frame,
//write to the end of the frame,0.5,,//write to the end of the frame,
else{,0.0,else{,,
cpos = cartlab[fd].file_pos%1024;,0.0,cpos = cartlab[fd].file_pos%1024;,,
c = 1024-cpos;,0.0,c = 1024-cpos;,,
bpos = 0;,0.0,bpos = 0;,,
,0.0,,,
cid = cartlab[fd].cart_id[iframe];,0.0,cid = cartlab[fd].cart_id[iframe];,,
fid = cartlab[fd].frame_id[iframe];,0.0,fid = cartlab[fd].frame_id[iframe];,,
,0.0,,,
"ldcart = opcode(CART_OP_LDCART,0,0,cid,0);",0.0,"ldcart = opcode(CART_OP_LDCART,0,0,cid,0);",,
"respond1 = cart_io_bus(ldcart,NULL);",0.0,"respond1 = cart_io_bus(ldcart,NULL);",,
if((result = issuccessful(respond1))==-1){,0.0,if((result = issuccessful(respond1))==-1){,,
return -1;,0.0,return -1;,,
},0.0,},,
"rdfrme = opcode(CART_OP_RDFRME,0,0,0,fid);",0.0,"rdfrme = opcode(CART_OP_RDFRME,0,0,0,fid);",,
"respond2 = cart_io_bus(rdfrme,buf1);",0.0,"respond2 = cart_io_bus(rdfrme,buf1);",,
if((result = issuccessful(respond2))==-1){,0.0,if((result = issuccessful(respond2))==-1){,,
return -1;,0.0,return -1;,,
},0.0,},,
"memcpy(buf1+cpos,buf+0,c);",0.0,"memcpy(buf1+cpos,buf+0,c);",,
,0.0,,,
"wrfrme = opcode(CART_OP_WRFRME,0,0,0,fid);",0.0,"wrfrme = opcode(CART_OP_WRFRME,0,0,0,fid);",,
"respond3 = cart_io_bus(wrfrme,buf1);",0.0,"respond3 = cart_io_bus(wrfrme,buf1);",,
if((result = issuccessful(respond3))==-1){,0.0,if((result = issuccessful(respond3))==-1){,,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
cartlab[fd].file_pos +=c;,0.0,cartlab[fd].file_pos +=c;,,
bpos = c+bpos;,0.0,bpos = c+bpos;,,
remain = remain - c;,0.0,remain = remain - c;,,
iframe += 1;,0.0,iframe += 1;,,
,0.0,,,
for(i=1;i<fcount+1;i++){,0.0,for(i=1;i<fcount+1;i++){,,
//check if there's a next frame exist for this file,0.5,,//check if there's a next frame exist for this file,
"//if there's not, give it a new frame and frame counter plus 1",0.5,,"//if there's not, give it a new frame and frame counter plus 1",
//check it each time it go to the next frame,0.5,,//check it each time it go to the next frame,
if(cartlab[fd].file_pos >= cartlab[fd].file_size){,0.0,if(cartlab[fd].file_pos >= cartlab[fd].file_size){,,
current_frame ++;,0.0,current_frame ++;,,
if(current_frame == 1024){,0.0,if(current_frame == 1024){,,
current_frame = 0;,0.0,current_frame = 0;,,
current_cart++;,0.0,current_cart++;,,
},0.0,},,
cartlab[fd].cart_id[iframe] = current_cart;,0.0,cartlab[fd].cart_id[iframe] = current_cart;,,
cartlab[fd].frame_id[iframe] = current_frame;,0.0,cartlab[fd].frame_id[iframe] = current_frame;,,
},0.0,},,
,0.0,,,
//get the cid and fid,0.5,,//get the cid and fid,
//get the postion in current frame,0.5,,//get the postion in current frame,
cid = cartlab[fd].cart_id[iframe];,0.0,cid = cartlab[fd].cart_id[iframe];,,
fid = cartlab[fd].frame_id[iframe];,0.0,fid = cartlab[fd].frame_id[iframe];,,
cpos = cartlab[fd].file_pos%1024;,0.0,cpos = cartlab[fd].file_pos%1024;,,
,0.0,,,
//if remian bytre is less than 1024,0.5,,//if remian bytre is less than 1024,
//which means it is the last frame the user need to use,0.5,,//which means it is the last frame the user need to use,
//adjust the size of file and the position,0.5,,//adjust the size of file and the position,
if(remain<=1024){,0.0,if(remain<=1024){,,
"ldcart = opcode(CART_OP_LDCART,0,0,cid,0);",0.0,"ldcart = opcode(CART_OP_LDCART,0,0,cid,0);",,
"respond1 = cart_io_bus(ldcart,NULL);",0.0,"respond1 = cart_io_bus(ldcart,NULL);",,
if((result = issuccessful(respond1))==-1){,0.0,if((result = issuccessful(respond1))==-1){,,
return -1;,0.0,return -1;,,
},0.0,},,
"rdfrme = opcode(CART_OP_RDFRME,0,0,0,fid);",0.0,"rdfrme = opcode(CART_OP_RDFRME,0,0,0,fid);",,
"respond2 = cart_io_bus(rdfrme,buf1);",0.0,"respond2 = cart_io_bus(rdfrme,buf1);",,
if((result = issuccessful(respond2))==-1){,0.0,if((result = issuccessful(respond2))==-1){,,
return -1;,0.0,return -1;,,
},0.0,},,
"memcpy(buf1,buf+bpos,remain);",0.0,"memcpy(buf1,buf+bpos,remain);",,
,0.0,,,
"wrfrme = opcode(CART_OP_WRFRME,0,0,0,fid);",0.0,"wrfrme = opcode(CART_OP_WRFRME,0,0,0,fid);",,
"respond3 = cart_io_bus(wrfrme,buf1);",0.0,"respond3 = cart_io_bus(wrfrme,buf1);",,
if((result = issuccessful(respond3))==-1){,0.0,if((result = issuccessful(respond3))==-1){,,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
cartlab[fd].file_pos += remain;,0.0,cartlab[fd].file_pos += remain;,,
if(cartlab[fd].file_pos >= cartlab[fd].file_size){,0.0,if(cartlab[fd].file_pos >= cartlab[fd].file_size){,,
cartlab[fd].file_size = cartlab[fd].file_pos;,0.0,cartlab[fd].file_size = cartlab[fd].file_pos;,,
},0.0,},,
else{,0.0,else{,,
cartlab[fd].file_size = cartlab[fd].file_size;,0.0,cartlab[fd].file_size = cartlab[fd].file_size;,,
},0.0,},,
},0.0,},,
//if the frame is neither the first one nor the last one,0.5,,//if the frame is neither the first one nor the last one,
//write this frame completely,0.5,,//write this frame completely,
//adjust position of file and position of buf,0.5,,//adjust position of file and position of buf,
//move to next frame,0.5,,//move to next frame,
else{,0.0,else{,,
"ldcart = opcode(CART_OP_LDCART,0,0,cid,0);",0.0,"ldcart = opcode(CART_OP_LDCART,0,0,cid,0);",,
"respond1 = cart_io_bus(ldcart,NULL);",0.0,"respond1 = cart_io_bus(ldcart,NULL);",,
if((result = issuccessful(respond1))==-1){,0.0,if((result = issuccessful(respond1))==-1){,,
return -1;,0.0,return -1;,,
},0.0,},,
"rdfrme = opcode(CART_OP_RDFRME,0,0,0,fid);",0.0,"rdfrme = opcode(CART_OP_RDFRME,0,0,0,fid);",,
"respond2 = cart_io_bus(rdfrme,buf1);",0.0,"respond2 = cart_io_bus(rdfrme,buf1);",,
if((result = issuccessful(respond2))==-1){,0.0,if((result = issuccessful(respond2))==-1){,,
return -1;,0.0,return -1;,,
},0.0,},,
"memcpy(buf1,buf+bpos,1024);",0.0,"memcpy(buf1,buf+bpos,1024);",,
,0.0,,,
"wrfrme = opcode(CART_OP_WRFRME,0,0,0,fid);",0.0,"wrfrme = opcode(CART_OP_WRFRME,0,0,0,fid);",,
"respond3 = cart_io_bus(wrfrme,buf1);",0.0,"respond3 = cart_io_bus(wrfrme,buf1);",,
if((result = issuccessful(respond3))==-1){,0.0,if((result = issuccessful(respond3))==-1){,,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
bpos = bpos+1024;,0.0,bpos = bpos+1024;,,
cpos = cpos+1024;,0.0,cpos = cpos+1024;,,
remain = remain-1024;,0.0,remain = remain-1024;,,
cartlab[fd].file_pos += 1024;,0.0,cartlab[fd].file_pos += 1024;,,
iframe = iframe + 1;,0.0,iframe = iframe + 1;,,
},0.0,},,
},0.0,},,
},0.0,},,
,0.0,,,
,0.0,,,
// Return successfully,0.5,,// Return successfully,
return (count);,0.0,return (count);,,
},0.0,},,
,0.0,,,
////////////////////////////////////////////////////////////////////////////////,0.5,,////////////////////////////////////////////////////////////////////////////////,
//,0.5,,//,
// Function     : cart_read,0.5,,// Function     : cart_read,
// Description  : Seek to specific point in the file,0.5,,// Description  : Seek to specific point in the file,
//,0.5,,//,
// Inputs       : fd - filename of the file to write to,0.5,,// Inputs       : fd - filename of the file to write to,
//                loc - offfset of file in relation to beginning of file,0.5,,//                loc - offfset of file in relation to beginning of file,
"// Outputs      : 0 if successful, -1 if failure",0.5,,"// Outputs      : 0 if successful, -1 if failure",
,0.0,,,
"int32_t cart_seek(int16_t fd, uint32_t loc) {",0.0,"int32_t cart_seek(int16_t fd, uint32_t loc) {",,
//check fd and status,0.5,,//check fd and status,
//check whether loc is larger than the file size,0.5,,//check whether loc is larger than the file size,
//move the postion of file to loc,0.5,,//move the postion of file to loc,
if(fd < 0){,0.0,if(fd < 0){,,
return -1;,0.0,return -1;,,
},0.0,},,
if(fd > fileCount){,0.0,if(fd > fileCount){,,
return -1;,0.0,return -1;,,
},0.0,},,
if(loc>cartlab[fd].file_size){,0.0,if(loc>cartlab[fd].file_size){,,
return -1;,0.0,return -1;,,
},0.0,},,
if(cartlab[fd].status == 0){,0.0,if(cartlab[fd].status == 0){,,
return -1;,0.0,return -1;,,
},0.0,},,
cartlab[fd].file_pos = loc;,0.0,cartlab[fd].file_pos = loc;,,
// Return successfully,0.5,,// Return successfully,
return (0);,0.0,return (0);,,
},0.0,},,
