originalCode,typeIndicator,pureCode,pureComment,pureMacro
////////////////////////////////////////////////////////////////////////////////,0.5,,////////////////////////////////////////////////////////////////////////////////,
//,0.5,,//,
//  File           : cart_driver.c,0.5,,//  File           : cart_driver.c,
//  Description    : This is the implementation of the standardized IO functions,0.5,,//  Description    : This is the implementation of the standardized IO functions,
//                   for used to access the CART storage system.,0.5,,//                   for used to access the CART storage system.,
//,0.5,,//,
//  Author         : Yuan Fu,0.5,,//  Author         : Yuan Fu,
//  PSU email      : ykf5041@psu.edu,0.5,,//  PSU email      : ykf5041@psu.edu,
//,0.5,,//,
,0.0,,,
// Includes,0.5,,// Includes,
#include <stdlib.h>,0.0,#include <stdlib.h>,,
#include <string.h>,0.0,#include <string.h>,,
,0.0,,,
// Project Includes,0.5,,// Project Includes,
"#include ""cart_driver.h""",0.0,"#include ""cart_driver.h""",,
"#include ""cart_controller.h""",0.0,"#include ""cart_controller.h""",,
"#include ""cmpsc311_log.h""",0.0,"#include ""cmpsc311_log.h""",,
,0.0,,,
// Structs,0.5,,// Structs,
,0.0,,,
// states of a file,0.5,,// states of a file,
typedef enum {,0.0,typedef enum {,,
"FD_EMPTY = -1,",0.0,"FD_EMPTY = -1,",,
"FD_CLOSE = 0,",0.0,"FD_CLOSE = 0,",,
FD_OPEN = 1,0.0,FD_OPEN = 1,,
} fd_state;,0.0,} fd_state;,,
,0.0,,,
// a frame used by a file,0.5,,// a frame used by a file,
struct frame {,0.0,struct frame {,,
// cart id,0.5,,// cart id,
int cid;,0.0,int cid;,,
// frame id,0.5,,// frame id,
int fid;,0.0,int fid;,,
};,0.0,};,,
,0.0,,,
"// the file, detail see below",0.5,,"// the file, detail see below",
struct fd {,0.0,struct fd {,,
char filename[128];,0.0,char filename[128];,,
// file size,0.5,,// file size,
int size;,0.0,int size;,,
// current position,0.5,,// current position,
int pos;,0.0,int pos;,,
// all the frames the file used,0.5,,// all the frames the file used,
struct frame frames[100];,0.0,struct frame frames[100];,,
// the state of the file,0.5,,// the state of the file,
fd_state state;,0.0,fd_state state;,,
// number of frames we have,0.5,,// number of frames we have,
int frame_count;,0.0,int frame_count;,,
};,0.0,};,,
,0.0,,,
,0.0,,,
// Global vars,0.5,,// Global vars,
,0.0,,,
"// currently loaded cart id, -1 means none loaded",0.5,,"// currently loaded cart id, -1 means none loaded",
int current_cart = -1;,0.0,int current_cart = -1;,,
"// 1 means cart hardware is on and inited, 0 means not",0.5,,"// 1 means cart hardware is on and inited, 0 means not",
int cart_is_on = 0;,0.0,int cart_is_on = 0;,,
// all fd鈥檚,0.5,,// all fd鈥檚,
struct fd fd_table[1024];,0.0,struct fd fd_table[1024];,,
// last frame that we pulled out to store file.,0.5,,// last frame that we pulled out to store file.,
// At first fid is -1 so the first one wee add will have fid 0,0.5,,// At first fid is -1 so the first one wee add will have fid 0,
"struct frame last_used_frame = {0, -1};",0.0,"struct frame last_used_frame = {0, -1};",,
// my debug level,0.5,,// my debug level,
unsigned long CartDebugLevel;,0.0,unsigned long CartDebugLevel;,,
,0.0,,,
// Helpers,0.5,,// Helpers,
,0.0,,,
/*,1.0,,/*,
* Return the larger int from a & b,1.0,,* Return the larger int from a & b,
*/,0.0,*/,,
"int max(int a , int b) {",0.0,"int max(int a , int b) {",,
if (a > b),0.0,if (a > b),,
return a;,0.0,return a;,,
else,0.0,else,,
return b;,0.0,return b;,,
},0.0,},,
,0.0,,,
/*,1.0,,/*,
* Return the smaller int from a & b,1.0,,* Return the smaller int from a & b,
*/,0.0,*/,,
"int min(int a , int b) {",0.0,"int min(int a , int b) {",,
if (a < b),0.0,if (a < b),,
return a;,0.0,return a;,,
else,0.0,else,,
return b;,0.0,return b;,,
},0.0,},,
,0.0,,,
,0.0,,,
// Bus functions,0.5,,// Bus functions,
,0.0,,,
/*,1.0,,/*,
"* If reg鈥檚 return bit is 0, return 0,",1.0,,"* If reg鈥檚 return bit is 0, return 0,",
"* if reg鈥檚 return bit is 0, return -1",1.0,,"* if reg鈥檚 return bit is 0, return -1",
*/,0.0,*/,,
int bus_is_ok(CartXferRegister reg) {,0.0,int bus_is_ok(CartXferRegister reg) {,,
unsigned long bit = (reg << 16) >> 63;,0.0,unsigned long bit = (reg << 16) >> 63;,,
if (bit == 0),0.0,if (bit == 0),,
return 0;,0.0,return 0;,,
else,0.0,else,,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
/*,1.0,,/*,
* Wrapper function for op INITMS,1.0,,* Wrapper function for op INITMS,
* Just send all 0鈥檚,1.0,,* Just send all 0鈥檚,
*/,0.0,*/,,
int bus_init_ms() {,0.0,int bus_init_ms() {,,
"return bus_is_ok(cart_io_bus((CartXferRegister) CART_OP_INITMS, NULL));",0.0,"return bus_is_ok(cart_io_bus((CartXferRegister) CART_OP_INITMS, NULL));",,
},0.0,},,
,0.0,,,
/*,1.0,,/*,
* Wrapper function for op BZERO,1.0,,* Wrapper function for op BZERO,
* shift bits and send the opcode.,1.0,,* shift bits and send the opcode.,
*/,0.0,*/,,
int bus_zero_cart() {,0.0,int bus_zero_cart() {,,
CartXferRegister op = 0;,0.0,CartXferRegister op = 0;,,
op = (op | CART_OP_BZERO) << (64 - 8);,0.0,op = (op | CART_OP_BZERO) << (64 - 8);,,
"return bus_is_ok(cart_io_bus(op, NULL));",0.0,"return bus_is_ok(cart_io_bus(op, NULL));",,
},0.0,},,
,0.0,,,
,0.0,,,
/*,1.0,,/*,
* Wrapper function for op LDCART,1.0,,* Wrapper function for op LDCART,
* Remember to set current_cart.,1.0,,* Remember to set current_cart.,
* shift bits and send the opcode.,1.0,,* shift bits and send the opcode.,
*/,0.0,*/,,
int bus_load_cart(int id) {,0.0,int bus_load_cart(int id) {,,
CartXferRegister op = 0;,0.0,CartXferRegister op = 0;,,
CartXferRegister base = 0;,0.0,CartXferRegister base = 0;,,
op |= (base | CART_OP_LDCART) << (64 - 8);,0.0,op |= (base | CART_OP_LDCART) << (64 - 8);,,
op |= (base | ((unsigned int) id)) << (63 - 32);,0.0,op |= (base | ((unsigned int) id)) << (63 - 32);,,
"return bus_is_ok(cart_io_bus(op, NULL));",0.0,"return bus_is_ok(cart_io_bus(op, NULL));",,
},0.0,},,
,0.0,,,
/*,1.0,,/*,
* Wrapper function for op RDFRME,1.0,,* Wrapper function for op RDFRME,
* shift bits and send the opcode.,1.0,,* shift bits and send the opcode.,
*/,0.0,*/,,
"int bus_read_frame(int id, void *buf) {",0.0,"int bus_read_frame(int id, void *buf) {",,
CartXferRegister op = 0;,0.0,CartXferRegister op = 0;,,
CartXferRegister base = 0;,0.0,CartXferRegister base = 0;,,
op |= (base | CART_OP_RDFRME) << (64 - 8);,0.0,op |= (base | CART_OP_RDFRME) << (64 - 8);,,
op |= (base | ((unsigned int) id)) << (63 - 48);,0.0,op |= (base | ((unsigned int) id)) << (63 - 48);,,
"return bus_is_ok(cart_io_bus(op, buf));",0.0,"return bus_is_ok(cart_io_bus(op, buf));",,
},0.0,},,
,0.0,,,
/*,1.0,,/*,
* Wrapper function for op WRFRME,1.0,,* Wrapper function for op WRFRME,
* shift bits and send the opcode.,1.0,,* shift bits and send the opcode.,
*/,0.0,*/,,
"int bus_write_frame(int id, void *buf) {",0.0,"int bus_write_frame(int id, void *buf) {",,
CartXferRegister op = 0;,0.0,CartXferRegister op = 0;,,
CartXferRegister base = 0;,0.0,CartXferRegister base = 0;,,
op |= (base | CART_OP_WRFRME) << (64 - 8);,0.0,op |= (base | CART_OP_WRFRME) << (64 - 8);,,
op |= (base | ((unsigned int) id)) << (63 - 48);,0.0,op |= (base | ((unsigned int) id)) << (63 - 48);,,
"return bus_is_ok(cart_io_bus(op, buf));",0.0,"return bus_is_ok(cart_io_bus(op, buf));",,
},0.0,},,
,0.0,,,
/*,1.0,,/*,
* Wrapper function for op POWOFF,1.0,,* Wrapper function for op POWOFF,
* shift bits and send the opcode.,1.0,,* shift bits and send the opcode.,
*/,0.0,*/,,
int bus_poweroff() {,0.0,int bus_poweroff() {,,
CartXferRegister op = 0;,0.0,CartXferRegister op = 0;,,
op = (op | CART_OP_POWOFF) << (64 - 8);,0.0,op = (op | CART_OP_POWOFF) << (64 - 8);,,
"return bus_is_ok(cart_io_bus(op, NULL));",0.0,"return bus_is_ok(cart_io_bus(op, NULL));",,
},0.0,},,
,0.0,,,
// Cart functions,0.5,,// Cart functions,
,0.0,,,
/*,1.0,,/*,
"* Load FRAME from START by COUNT, into BUF from BUFSTART by COUNT.",1.0,,"* Load FRAME from START by COUNT, into BUF from BUFSTART by COUNT.",
"* Before use, check if count exceeds buf.",1.0,,"* Before use, check if count exceeds buf.",
*,1.0,,*,
* 1. make sure cart is loaded,1.0,,* 1. make sure cart is loaded,
* 2. load frame out to a tmp buffer,1.0,,* 2. load frame out to a tmp buffer,
* 3. copy the portion of tmp buffer that we want to,1.0,,* 3. copy the portion of tmp buffer that we want to,
*    the portion of buf we want,1.0,,*    the portion of buf we want,
*/,0.0,*/,,
"int read_frame(struct frame *frame, void *buf, int start,",0.0,"int read_frame(struct frame *frame, void *buf, int start,",,
"int count, int bufstart) {",0.0,"int count, int bufstart) {",,
if (count > CART_FRAME_SIZE),0.0,if (count > CART_FRAME_SIZE),,
return -1;,0.0,return -1;,,
,0.0,,,
"logMessage(CartDebugLevel, ""read_frame: frame: C %d F %d start: %d count: %d bufstart: %d"",",0.0,"logMessage(CartDebugLevel, ""read_frame: frame: C %d F %d start: %d count: %d bufstart: %d"",",,
"frame->cid, frame->fid, start, count, bufstart);",0.0,"frame->cid, frame->fid, start, count, bufstart);",,
,0.0,,,
// load cart,0.5,,// load cart,
if (current_cart != frame->cid) {,0.0,if (current_cart != frame->cid) {,,
if (bus_load_cart(frame->cid) < 0),0.0,if (bus_load_cart(frame->cid) < 0),,
return -1;,0.0,return -1;,,
current_cart = frame->cid;,0.0,current_cart = frame->cid;,,
},0.0,},,
,0.0,,,
char tmp_buf[CART_FRAME_SIZE];,0.0,char tmp_buf[CART_FRAME_SIZE];,,
,0.0,,,
"if (bus_read_frame(frame->fid, tmp_buf) < 0)",0.0,"if (bus_read_frame(frame->fid, tmp_buf) < 0)",,
return -1;,0.0,return -1;,,
,0.0,,,
"memcpy(buf+bufstart, tmp_buf+start, count);",0.0,"memcpy(buf+bufstart, tmp_buf+start, count);",,
,0.0,,,
return 0;,0.0,return 0;,,
},0.0,},,
,0.0,,,
/*,1.0,,/*,
* Add COUNT number of frames to FD.,1.0,,* Add COUNT number of frames to FD.,
"* Also changes frame_count for you, how nice.",1.0,,"* Also changes frame_count for you, how nice.",
"* Return -1 if no more frame is available, 0 if success",1.0,,"* Return -1 if no more frame is available, 0 if success",
*,1.0,,*,
* 1. get the last used frame鈥檚 cart and frame id,1.0,,* 1. get the last used frame鈥檚 cart and frame id,
* 2. get the next frame,1.0,,* 2. get the next frame,
* 3. add the frame to fd,1.0,,* 3. add the frame to fd,
* 4. repeat until we added count number of frames to fd,1.0,,* 4. repeat until we added count number of frames to fd,
"* 5. set last used frame to, well, the last used frame",1.0,,"* 5. set last used frame to, well, the last used frame",
*/,0.0,*/,,
"int add_frame(struct fd *fd, int count) {",0.0,"int add_frame(struct fd *fd, int count) {",,
,0.0,,,
// index for our new frame,0.5,,// index for our new frame,
int frame_idx = fd->frame_count;,0.0,int frame_idx = fd->frame_count;,,
,0.0,,,
int cid = last_used_frame.cid;,0.0,int cid = last_used_frame.cid;,,
int fid = last_used_frame.fid;,0.0,int fid = last_used_frame.fid;,,
"struct frame new_frame = { 0, 0 };",0.0,"struct frame new_frame = { 0, 0 };",,
,0.0,,,
if (cid == 1023 && fid == 1023),0.0,if (cid == 1023 && fid == 1023),,
return -1;,0.0,return -1;,,
,0.0,,,
int i;,0.0,int i;,,
for (i=0; i<count; i++) {,0.0,for (i=0; i<count; i++) {,,
fid++;,0.0,fid++;,,
,0.0,,,
if (last_used_frame.fid == CART_CARTRIDGE_SIZE) {,0.0,if (last_used_frame.fid == CART_CARTRIDGE_SIZE) {,,
// last frame,0.5,,// last frame,
fid = 0;,0.0,fid = 0;,,
cid += 1;,0.0,cid += 1;,,
},0.0,},,
,0.0,,,
new_frame.cid = cid;,0.0,new_frame.cid = cid;,,
new_frame.fid = fid;,0.0,new_frame.fid = fid;,,
fd->frames[frame_idx] = new_frame;,0.0,fd->frames[frame_idx] = new_frame;,,
fd->frame_count += 1;,0.0,fd->frame_count += 1;,,
,0.0,,,
"logMessage(CartDebugLevel, ""add_frame: loop: cid: %d fid: %d"", cid, fid);",0.0,"logMessage(CartDebugLevel, ""add_frame: loop: cid: %d fid: %d"", cid, fid);",,
},0.0,},,
,0.0,,,
// record the use of this new frame,0.5,,// record the use of this new frame,
// don鈥檛 use = new_frame,0.5,,// don鈥檛 use = new_frame,
last_used_frame.cid = cid;,0.0,last_used_frame.cid = cid;,,
last_used_frame.fid = fid;,0.0,last_used_frame.fid = fid;,,
,0.0,,,
"logMessage(CartDebugLevel, ""add_frame: last_used_frame: cid: %d fid: %d"", cid, fid);",0.0,"logMessage(CartDebugLevel, ""add_frame: last_used_frame: cid: %d fid: %d"", cid, fid);",,
,0.0,,,
return 0;,0.0,return 0;,,
},0.0,},,
,0.0,,,
/*,1.0,,/*,
"* Write to FRAME from START by COUNT, from BUF from BUFSTART by COUNT.",1.0,,"* Write to FRAME from START by COUNT, from BUF from BUFSTART by COUNT.",
"* Before use, check if count exceeds buf.",1.0,,"* Before use, check if count exceeds buf.",
*,1.0,,*,
* 1. make sure cart is loaded,1.0,,* 1. make sure cart is loaded,
* 2. load frame out to a tmp buffer,1.0,,* 2. load frame out to a tmp buffer,
* 3. copy the portion of BUF that we want to,1.0,,* 3. copy the portion of BUF that we want to,
*    the portion of tmp buffer we want,1.0,,*    the portion of tmp buffer we want,
* 4. write tmp buffer back to FRAME,1.0,,* 4. write tmp buffer back to FRAME,
*/,0.0,*/,,
"int write_frame(struct frame *frame, void *buf, int start,",0.0,"int write_frame(struct frame *frame, void *buf, int start,",,
"int count, int bufstart) {",0.0,"int count, int bufstart) {",,
if (count > CART_FRAME_SIZE),0.0,if (count > CART_FRAME_SIZE),,
return -1;,0.0,return -1;,,
,0.0,,,
"logMessage(CartDebugLevel, ""write_frame: frame: C %d F %d start: %d count: %d bufstart: %d"",",0.0,"logMessage(CartDebugLevel, ""write_frame: frame: C %d F %d start: %d count: %d bufstart: %d"",",,
"frame->cid, frame->fid, start, count, bufstart);",0.0,"frame->cid, frame->fid, start, count, bufstart);",,
,0.0,,,
// load cart,0.5,,// load cart,
if (current_cart != frame->cid) {,0.0,if (current_cart != frame->cid) {,,
if (bus_load_cart(frame->cid) < 0),0.0,if (bus_load_cart(frame->cid) < 0),,
return -1;,0.0,return -1;,,
current_cart = frame->cid;,0.0,current_cart = frame->cid;,,
},0.0,},,
,0.0,,,
char tmp_buf[CART_FRAME_SIZE];,0.0,char tmp_buf[CART_FRAME_SIZE];,,
,0.0,,,
// load into tmp_buf,0.5,,// load into tmp_buf,
"if (bus_read_frame(frame->fid, tmp_buf) < 0)",0.0,"if (bus_read_frame(frame->fid, tmp_buf) < 0)",,
return -1;,0.0,return -1;,,
,0.0,,,
// write to tmp_buf,0.5,,// write to tmp_buf,
"memcpy(tmp_buf+start, buf+bufstart, count);",0.0,"memcpy(tmp_buf+start, buf+bufstart, count);",,
,0.0,,,
// write to frame,0.5,,// write to frame,
"if (bus_write_frame(frame->fid, tmp_buf) < 0) {",0.0,"if (bus_write_frame(frame->fid, tmp_buf) < 0) {",,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
return 0;,0.0,return 0;,,
},0.0,},,
,0.0,,,
/*,1.0,,/*,
* Return an fid that can be used to store new file.,1.0,,* Return an fid that can be used to store new file.,
* Return -1 if failed.,1.0,,* Return -1 if failed.,
*,1.0,,*,
* look through each files in fd_table and return,1.0,,* look through each files in fd_table and return,
* the first one that state is empty,1.0,,* the first one that state is empty,
*/,0.0,*/,,
int find_empty_fd() {,0.0,int find_empty_fd() {,,
int i;,0.0,int i;,,
for (i=0; i < CART_MAX_TOTAL_FILES; i++) {,0.0,for (i=0; i < CART_MAX_TOTAL_FILES; i++) {,,
struct fd *fd = fd_table + i;,0.0,struct fd *fd = fd_table + i;,,
if (fd->state == FD_EMPTY),0.0,if (fd->state == FD_EMPTY),,
return i;,0.0,return i;,,
},0.0,},,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
/*,1.0,,/*,
"* Return fid which has filename = FILENAME, return -1 if not found",1.0,,"* Return fid which has filename = FILENAME, return -1 if not found",
* Return -2 if error,1.0,,* Return -2 if error,
*,1.0,,*,
* look through each files in fd_table and return,1.0,,* look through each files in fd_table and return,
* the first one has filename equal to FILENAME.,1.0,,* the first one has filename equal to FILENAME.,
* If none found return -1,1.0,,* If none found return -1,
*/,0.0,*/,,
int find_file_fd(char *filename) {,0.0,int find_file_fd(char *filename) {,,
int i;,0.0,int i;,,
for (i=0; i < CART_MAX_TOTAL_FILES; i++) {,0.0,for (i=0; i < CART_MAX_TOTAL_FILES; i++) {,,
struct fd *fd = fd_table + i;,0.0,struct fd *fd = fd_table + i;,,
"if (fd->state != FD_EMPTY && strcmp(fd->filename, filename) == 0) {",0.0,"if (fd->state != FD_EMPTY && strcmp(fd->filename, filename) == 0) {",,
if (fd->state == FD_OPEN),0.0,if (fd->state == FD_OPEN),,
return -2;,0.0,return -2;,,
else,0.0,else,,
return i;,0.0,return i;,,
},0.0,},,
},0.0,},,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
//,0.5,,//,
// Implementation,0.5,,// Implementation,
,0.0,,,
////////////////////////////////////////////////////////////////////////////////,0.5,,////////////////////////////////////////////////////////////////////////////////,
//,0.5,,//,
// Function     : cart_poweron,0.5,,// Function     : cart_poweron,
"// Description  : Startup up the CART interface, initialize filesystem",0.5,,"// Description  : Startup up the CART interface, initialize filesystem",
//,0.5,,//,
// Inputs       : none,0.5,,// Inputs       : none,
"// Outputs      : 0 if successful, -1 if failure",0.5,,"// Outputs      : 0 if successful, -1 if failure",
,0.0,,,
// 1. send INITMS,0.5,,// 1. send INITMS,
"// 2. for each cart, load (LDCART) and zero (BZERO)",0.5,,"// 2. for each cart, load (LDCART) and zero (BZERO)",
"// 3. for each file, set state to empty",0.5,,"// 3. for each file, set state to empty",
// 4. set cart_is_on,0.5,,// 4. set cart_is_on,
int32_t cart_poweron(void) {,0.0,int32_t cart_poweron(void) {,,
"CartDebugLevel = registerLogLevel(""CART_DRIVER_DEBUG"", 0);",0.0,"CartDebugLevel = registerLogLevel(""CART_DRIVER_DEBUG"", 0);",,
,0.0,,,
if (cart_is_on) {,0.0,if (cart_is_on) {,,
"logMessage(CartDebugLevel, ""cart_poweron: cart is already on"");",0.0,"logMessage(CartDebugLevel, ""cart_poweron: cart is already on"");",,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
// init cart,0.5,,// init cart,
if (bus_init_ms() < 0),0.0,if (bus_init_ms() < 0),,
return -1;,0.0,return -1;,,
,0.0,,,
// load and zero each cart,0.5,,// load and zero each cart,
int i;,0.0,int i;,,
for (i=0; i < CART_MAX_CARTRIDGES; i++) {,0.0,for (i=0; i < CART_MAX_CARTRIDGES; i++) {,,
if (bus_load_cart(i) < 0),0.0,if (bus_load_cart(i) < 0),,
return -1;,0.0,return -1;,,
if (bus_zero_cart() < 0),0.0,if (bus_zero_cart() < 0),,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
// init fd_table,0.5,,// init fd_table,
for (i = 0; i < CART_MAX_TOTAL_FILES; i++) {,0.0,for (i = 0; i < CART_MAX_TOTAL_FILES; i++) {,,
struct fd *fd = fd_table + i;,0.0,struct fd *fd = fd_table + i;,,
fd->state = FD_EMPTY;,0.0,fd->state = FD_EMPTY;,,
},0.0,},,
,0.0,,,
cart_is_on = 1;,0.0,cart_is_on = 1;,,
// Return successfully,0.5,,// Return successfully,
return(0);,0.0,return(0);,,
},0.0,},,
,0.0,,,
////////////////////////////////////////////////////////////////////////////////,0.5,,////////////////////////////////////////////////////////////////////////////////,
//,0.5,,//,
// Function     : cart_poweroff,0.5,,// Function     : cart_poweroff,
"// Description  : Shut down the CART interface, close all files",0.5,,"// Description  : Shut down the CART interface, close all files",
//,0.5,,//,
// Inputs       : none,0.5,,// Inputs       : none,
"// Outputs      : 0 if successful, -1 if failure",0.5,,"// Outputs      : 0 if successful, -1 if failure",
,0.0,,,
"// 1. for each file, set state to empty",0.5,,"// 1. for each file, set state to empty",
// 2. send POWOFF,0.5,,// 2. send POWOFF,
// 3. set cart_is_on,0.5,,// 3. set cart_is_on,
int32_t cart_poweroff(void) {,0.0,int32_t cart_poweroff(void) {,,
if (!cart_is_on),0.0,if (!cart_is_on),,
return -1;,0.0,return -1;,,
int i;,0.0,int i;,,
for (i=0; i<CART_MAX_TOTAL_FILES; i++) {,0.0,for (i=0; i<CART_MAX_TOTAL_FILES; i++) {,,
struct fd *fd = fd_table + i;,0.0,struct fd *fd = fd_table + i;,,
fd->state = FD_EMPTY;,0.0,fd->state = FD_EMPTY;,,
},0.0,},,
,0.0,,,
int ret = bus_poweroff();,0.0,int ret = bus_poweroff();,,
if (ret < 0),0.0,if (ret < 0),,
return -1;,0.0,return -1;,,
,0.0,,,
cart_is_on = 0;,0.0,cart_is_on = 0;,,
return 0;,0.0,return 0;,,
},0.0,},,
,0.0,,,
////////////////////////////////////////////////////////////////////////////////,0.5,,////////////////////////////////////////////////////////////////////////////////,
//,0.5,,//,
// Function     : cart_open,0.5,,// Function     : cart_open,
// Description  : This function opens the file and returns a file handle,0.5,,// Description  : This function opens the file and returns a file handle,
//,0.5,,//,
// Inputs       : path - filename of the file to open,0.5,,// Inputs       : path - filename of the file to open,
"// Outputs      : file handle if successful, -1 if failure",0.5,,"// Outputs      : file handle if successful, -1 if failure",
,0.0,,,
// 1. look for file that has FILENAME,0.5,,// 1. look for file that has FILENAME,
"// 2. if none found, create a new file:",0.5,,"// 2. if none found, create a new file:",
"//    file an empty file, fill in filename, pos, size, etc",0.5,,"//    file an empty file, fill in filename, pos, size, etc",
int16_t cart_open(char *path) {,0.0,int16_t cart_open(char *path) {,,
,0.0,,,
"logMessage(CartDebugLevel, ""cart_open: path: %s"", path);",0.0,"logMessage(CartDebugLevel, ""cart_open: path: %s"", path);",,
,0.0,,,
// check for misuse,0.5,,// check for misuse,
if (strlen(path) >= 128) {,0.0,if (strlen(path) >= 128) {,,
"logMessage(CartDebugLevel, ""cart_open: path too long"");",0.0,"logMessage(CartDebugLevel, ""cart_open: path too long"");",,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
// get a file descriptor,0.5,,// get a file descriptor,
int fid;,0.0,int fid;,,
if ((fid = find_file_fd(path)) < -1) {,0.0,if ((fid = find_file_fd(path)) < -1) {,,
"logMessage(CartDebugLevel, ""cart_open: find_file_fd failed"");",0.0,"logMessage(CartDebugLevel, ""cart_open: find_file_fd failed"");",,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
if (fid == -1),0.0,if (fid == -1),,
fid = find_empty_fd();,0.0,fid = find_empty_fd();,,
,0.0,,,
if (fid < 0) {,0.0,if (fid < 0) {,,
"logMessage(CartDebugLevel, ""cart_open: find_empty_fd failed"");",0.0,"logMessage(CartDebugLevel, ""cart_open: find_empty_fd failed"");",,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
// check for weirdness,0.5,,// check for weirdness,
struct fd *fd = fd_table + fid;,0.0,struct fd *fd = fd_table + fid;,,
if (fd->state == FD_OPEN) {,0.0,if (fd->state == FD_OPEN) {,,
"logMessage(CartDebugLevel, ""cart_open: file is already open"");",0.0,"logMessage(CartDebugLevel, ""cart_open: file is already open"");",,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
// setup,0.5,,// setup,
"memcpy(fd->filename, path, strlen(path)+1);",0.0,"memcpy(fd->filename, path, strlen(path)+1);",,
fd->pos = 0;,0.0,fd->pos = 0;,,
fd->size = 0;,0.0,fd->size = 0;,,
fd->state = FD_OPEN;,0.0,fd->state = FD_OPEN;,,
,0.0,,,
"logMessage(CartDebugLevel, ""cart_open: return fd: %d"", fid);",0.0,"logMessage(CartDebugLevel, ""cart_open: return fd: %d"", fid);",,
,0.0,,,
// THIS SHOULD RETURN A FILE HANDLE,0.5,,// THIS SHOULD RETURN A FILE HANDLE,
return fid;,0.0,return fid;,,
},0.0,},,
,0.0,,,
////////////////////////////////////////////////////////////////////////////////,0.5,,////////////////////////////////////////////////////////////////////////////////,
//,0.5,,//,
// Function     : cart_close,0.5,,// Function     : cart_close,
// Description  : This function closes the file,0.5,,// Description  : This function closes the file,
//,0.5,,//,
// Inputs       : fd - the file descriptor,0.5,,// Inputs       : fd - the file descriptor,
"// Outputs      : 0 if successful, -1 if failure",0.5,,"// Outputs      : 0 if successful, -1 if failure",
,0.0,,,
// 1. get the file by FD,0.5,,// 1. get the file by FD,
// 2. set state to close,0.5,,// 2. set state to close,
int16_t cart_close(int16_t fd) {,0.0,int16_t cart_close(int16_t fd) {,,
,0.0,,,
"logMessage(CartDebugLevel, ""cart_close: fd: %d"", fd);",0.0,"logMessage(CartDebugLevel, ""cart_close: fd: %d"", fd);",,
,0.0,,,
// check for misuse,0.5,,// check for misuse,
if (fd >= 1024 || fd < 0) {,0.0,if (fd >= 1024 || fd < 0) {,,
"logMessage(CartDebugLevel, ""cart_close: invalid fd: %d"", fd);",0.0,"logMessage(CartDebugLevel, ""cart_close: invalid fd: %d"", fd);",,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
// get fd,0.5,,// get fd,
struct fd *myfd = fd_table + fd;,0.0,struct fd *myfd = fd_table + fd;,,
,0.0,,,
// check for weirdness,0.5,,// check for weirdness,
if (myfd->state != FD_OPEN) {,0.0,if (myfd->state != FD_OPEN) {,,
"logMessage(CartDebugLevel, ""cart_close: file not open"");",0.0,"logMessage(CartDebugLevel, ""cart_close: file not open"");",,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
// close,0.5,,// close,
myfd->state = FD_CLOSE;,0.0,myfd->state = FD_CLOSE;,,
,0.0,,,
// Return successfully,0.5,,// Return successfully,
return (0);,0.0,return (0);,,
},0.0,},,
,0.0,,,
////////////////////////////////////////////////////////////////////////////////,0.5,,////////////////////////////////////////////////////////////////////////////////,
//,0.5,,//,
// Function     : cart_read,0.5,,// Function     : cart_read,
"// Description  : Reads ""count"" bytes from the file handle ""fh"" into the",0.5,,"// Description  : Reads ""count"" bytes from the file handle ""fh"" into the",
"//                buffer ""buf""",0.5,,"//                buffer ""buf""",
//,0.5,,//,
// Inputs       : fd - filename of the file to read from,0.5,,// Inputs       : fd - filename of the file to read from,
//                buf - pointer to buffer to read into,0.5,,//                buf - pointer to buffer to read into,
//                count - number of bytes to read,0.5,,//                count - number of bytes to read,
"// Outputs      : bytes read if successful, -1 if failure",0.5,,"// Outputs      : bytes read if successful, -1 if failure",
,0.0,,,
// 1. get the file by FD,0.5,,// 1. get the file by FD,
// 2. for each frame that is spanned by the portion we want to read:,0.5,,// 2. for each frame that is spanned by the portion we want to read:,
// 3. use READ_FRAME to load the portion of the frame that we want to into BUF,0.5,,// 3. use READ_FRAME to load the portion of the frame that we want to into BUF,
//    at the position we want,0.5,,//    at the position we want,
"int32_t cart_read(int16_t fd, void *buf, int32_t count) {",0.0,"int32_t cart_read(int16_t fd, void *buf, int32_t count) {",,
,0.0,,,
"logMessage(CartDebugLevel, ""cart_read: fd: %d count: %d"", fd, count);",0.0,"logMessage(CartDebugLevel, ""cart_read: fd: %d count: %d"", fd, count);",,
,0.0,,,
// check for misuse,0.5,,// check for misuse,
if (fd >= 1024 || fd < 0) {,0.0,if (fd >= 1024 || fd < 0) {,,
"logMessage(CartDebugLevel, ""cart_read: invalid fd: %d"", fd);",0.0,"logMessage(CartDebugLevel, ""cart_read: invalid fd: %d"", fd);",,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
// get fd,0.5,,// get fd,
struct fd *myfd = fd_table + fd;,0.0,struct fd *myfd = fd_table + fd;,,
,0.0,,,
// only read what we have,0.5,,// only read what we have,
"count = min(myfd->size - myfd->pos, count);",0.0,"count = min(myfd->size - myfd->pos, count);",,
,0.0,,,
// check for error,0.5,,// check for error,
if (myfd->state != FD_OPEN) {,0.0,if (myfd->state != FD_OPEN) {,,
"logMessage(CartDebugLevel, ""cart_read: file not open"");",0.0,"logMessage(CartDebugLevel, ""cart_read: file not open"");",,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
// current pos,0.5,,// current pos,
int pos = myfd->pos;,0.0,int pos = myfd->pos;,,
// pos become this at the end of read,0.5,,// pos become this at the end of read,
int endpos = pos + count;,0.0,int endpos = pos + count;,,
,0.0,,,
// calculate frame info,0.5,,// calculate frame info,
,0.0,,,
// which frame of the file we are using,0.5,,// which frame of the file we are using,
int frame_idx = pos / CART_FRAME_SIZE;,0.0,int frame_idx = pos / CART_FRAME_SIZE;,,
// position of each frame,0.5,,// position of each frame,
int frame_pos = pos % CART_FRAME_SIZE;,0.0,int frame_pos = pos % CART_FRAME_SIZE;,,
int unread_count = count;,0.0,int unread_count = count;,,
,0.0,,,
// copy data,0.5,,// copy data,
,0.0,,,
// amount of bytes we are copying into buf each time,0.5,,// amount of bytes we are copying into buf each time,
// this is for the first frame,0.5,,// this is for the first frame,
int frame_count;,0.0,int frame_count;,,
struct frame *frame;,0.0,struct frame *frame;,,
// position of buffer buf,0.5,,// position of buffer buf,
int bufpos = 0;,0.0,int bufpos = 0;,,
while (pos < endpos) {,0.0,while (pos < endpos) {,,
frame = myfd->frames + frame_idx;,0.0,frame = myfd->frames + frame_idx;,,
"frame_count = min(CART_FRAME_SIZE - frame_pos, unread_count);",0.0,"frame_count = min(CART_FRAME_SIZE - frame_pos, unread_count);",,
,0.0,,,
"logMessage(CartDebugLevel, ""cart_read: loop: pos: %d frame_idx: %d frame_pos: %d frame_count: %d bufpos: %d"",",0.0,"logMessage(CartDebugLevel, ""cart_read: loop: pos: %d frame_idx: %d frame_pos: %d frame_count: %d bufpos: %d"",",,
"pos, frame_idx, frame_pos, frame_count, bufpos);",0.0,"pos, frame_idx, frame_pos, frame_count, bufpos);",,
,0.0,,,
"if (read_frame(frame, buf, frame_pos, frame_count, bufpos) < 0) {",0.0,"if (read_frame(frame, buf, frame_pos, frame_count, bufpos) < 0) {",,
"logMessage(CartDebugLevel, ""cart_read: read_frame failed"");",0.0,"logMessage(CartDebugLevel, ""cart_read: read_frame failed"");",,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
frame_idx++;,0.0,frame_idx++;,,
frame_pos = 0;,0.0,frame_pos = 0;,,
bufpos += frame_count;,0.0,bufpos += frame_count;,,
pos += frame_count;,0.0,pos += frame_count;,,
unread_count -= frame_count;,0.0,unread_count -= frame_count;,,
},0.0,},,
,0.0,,,
// update fd,0.5,,// update fd,
myfd->pos = pos;,0.0,myfd->pos = pos;,,
,0.0,,,
"logMessage(CartDebugLevel, ""cart_read: finished: pos: %d"", pos);",0.0,"logMessage(CartDebugLevel, ""cart_read: finished: pos: %d"", pos);",,
,0.0,,,
// Return successfully,0.5,,// Return successfully,
return (count);,0.0,return (count);,,
},0.0,},,
,0.0,,,
////////////////////////////////////////////////////////////////////////////////,0.5,,////////////////////////////////////////////////////////////////////////////////,
//,0.5,,//,
// Function     : cart_write,0.5,,// Function     : cart_write,
"// Description  : Writes ""count"" bytes to the file handle ""fh"" from the",0.5,,"// Description  : Writes ""count"" bytes to the file handle ""fh"" from the",
"//                buffer  ""buf""",0.5,,"//                buffer  ""buf""",
//,0.5,,//,
// Inputs       : fd - filename of the file to write to,0.5,,// Inputs       : fd - filename of the file to write to,
//                buf - pointer to buffer to write from,0.5,,//                buf - pointer to buffer to write from,
//                count - number of bytes to write,0.5,,//                count - number of bytes to write,
"// Outputs      : bytes written if successful, -1 if failure",0.5,,"// Outputs      : bytes written if successful, -1 if failure",
,0.0,,,
// 1. get file by FD,0.5,,// 1. get file by FD,
// 2. for each frame that is spanned by the portion we are writing:,0.5,,// 2. for each frame that is spanned by the portion we are writing:,
// 3. use WRITE_FRAME to write the portion of the frame that we want by the data,0.5,,// 3. use WRITE_FRAME to write the portion of the frame that we want by the data,
//    in the portion of BUF that we want,0.5,,//    in the portion of BUF that we want,
"int32_t cart_write(int16_t fd, void *buf, int32_t count) {",0.0,"int32_t cart_write(int16_t fd, void *buf, int32_t count) {",,
,0.0,,,
"logMessage(CartDebugLevel, ""cart_write: fd: %d, count: %d"", fd, count);",0.0,"logMessage(CartDebugLevel, ""cart_write: fd: %d, count: %d"", fd, count);",,
,0.0,,,
if (fd >= 1024 || fd < 0) {,0.0,if (fd >= 1024 || fd < 0) {,,
"logMessage(CartDebugLevel, ""cart_write: invalid fd: %d"", fd);",0.0,"logMessage(CartDebugLevel, ""cart_write: invalid fd: %d"", fd);",,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
struct fd *myfd = fd_table + fd;,0.0,struct fd *myfd = fd_table + fd;,,
,0.0,,,
if (myfd->state != FD_OPEN) {,0.0,if (myfd->state != FD_OPEN) {,,
"logMessage(CartDebugLevel, ""cart_write: file not open"");",0.0,"logMessage(CartDebugLevel, ""cart_write: file not open"");",,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
// current pos,0.5,,// current pos,
int pos = myfd->pos;,0.0,int pos = myfd->pos;,,
// pos become this at the end of read,0.5,,// pos become this at the end of read,
int endpos = pos + count;,0.0,int endpos = pos + count;,,
,0.0,,,
// add enough frames,0.5,,// add enough frames,
int needed_frame_count = endpos / CART_FRAME_SIZE + 1;,0.0,int needed_frame_count = endpos / CART_FRAME_SIZE + 1;,,
int frame_need_to_add = needed_frame_count - myfd->frame_count;,0.0,int frame_need_to_add = needed_frame_count - myfd->frame_count;,,
if (frame_need_to_add > 0) {,0.0,if (frame_need_to_add > 0) {,,
"logMessage(CartDebugLevel, ""cart_write: add_frame: fd: %d count: %d"",",0.0,"logMessage(CartDebugLevel, ""cart_write: add_frame: fd: %d count: %d"",",,
"fd, frame_need_to_add);",0.0,"fd, frame_need_to_add);",,
"if (add_frame(myfd, frame_need_to_add) < 0)",0.0,"if (add_frame(myfd, frame_need_to_add) < 0)",,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
// calculate frame info,0.5,,// calculate frame info,
,0.0,,,
// which frame of the file we are using,0.5,,// which frame of the file we are using,
int frame_idx = pos / CART_FRAME_SIZE;,0.0,int frame_idx = pos / CART_FRAME_SIZE;,,
// position of each frame,0.5,,// position of each frame,
int frame_pos = pos % CART_FRAME_SIZE;,0.0,int frame_pos = pos % CART_FRAME_SIZE;,,
int unwritten_count = count;,0.0,int unwritten_count = count;,,
,0.0,,,
// write data,0.5,,// write data,
,0.0,,,
// amount of bytes we are writing into frame each time,0.5,,// amount of bytes we are writing into frame each time,
int frame_count;,0.0,int frame_count;,,
struct frame *frame;,0.0,struct frame *frame;,,
// position of buffer buf,0.5,,// position of buffer buf,
int bufpos = 0;,0.0,int bufpos = 0;,,
while (pos < endpos) {,0.0,while (pos < endpos) {,,
frame = myfd->frames + frame_idx;,0.0,frame = myfd->frames + frame_idx;,,
"frame_count = min(CART_FRAME_SIZE - frame_pos, unwritten_count);",0.0,"frame_count = min(CART_FRAME_SIZE - frame_pos, unwritten_count);",,
,0.0,,,
"logMessage(CartDebugLevel, ""cart_write: loop: pos: %d frame_idx: %d frame_pos: %d frame_count: %d bufpos: %d"",",0.0,"logMessage(CartDebugLevel, ""cart_write: loop: pos: %d frame_idx: %d frame_pos: %d frame_count: %d bufpos: %d"",",,
"pos, frame_idx, frame_pos, frame_count, bufpos);",0.0,"pos, frame_idx, frame_pos, frame_count, bufpos);",,
,0.0,,,
"if (write_frame(frame, buf, frame_pos, frame_count, bufpos) < 0) {",0.0,"if (write_frame(frame, buf, frame_pos, frame_count, bufpos) < 0) {",,
"logMessage(CartDebugLevel, ""cart_write: write_frame failed"");",0.0,"logMessage(CartDebugLevel, ""cart_write: write_frame failed"");",,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
frame_idx++;,0.0,frame_idx++;,,
frame_pos = 0;,0.0,frame_pos = 0;,,
bufpos += frame_count;,0.0,bufpos += frame_count;,,
pos += frame_count;,0.0,pos += frame_count;,,
unwritten_count -= frame_count;,0.0,unwritten_count -= frame_count;,,
},0.0,},,
,0.0,,,
// update fd,0.5,,// update fd,
myfd->pos = pos;,0.0,myfd->pos = pos;,,
"myfd->size = max(myfd->size, pos);",0.0,"myfd->size = max(myfd->size, pos);",,
,0.0,,,
"logMessage(CartDebugLevel, ""cart_write: finished: pos: %d size: %d"", myfd->pos, myfd->size);",0.0,"logMessage(CartDebugLevel, ""cart_write: finished: pos: %d size: %d"", myfd->pos, myfd->size);",,
,0.0,,,
// Return successfully,0.5,,// Return successfully,
return (count);,0.0,return (count);,,
},0.0,},,
,0.0,,,
////////////////////////////////////////////////////////////////////////////////,0.5,,////////////////////////////////////////////////////////////////////////////////,
//,0.5,,//,
// Function     : cart_seek,0.5,,// Function     : cart_seek,
// Description  : Seek to specific point in the file,0.5,,// Description  : Seek to specific point in the file,
//,0.5,,//,
// Inputs       : fd - filename of the file to write to,0.5,,// Inputs       : fd - filename of the file to write to,
//                loc - offfset of file in relation to beginning of file,0.5,,//                loc - offfset of file in relation to beginning of file,
"// Outputs      : 0 if successful, -1 if failure",0.5,,"// Outputs      : 0 if successful, -1 if failure",
,0.0,,,
// 1. get the file by FD,0.5,,// 1. get the file by FD,
// 2. change pos to LOC,0.5,,// 2. change pos to LOC,
"int32_t cart_seek(int16_t fd, uint32_t loc) {",0.0,"int32_t cart_seek(int16_t fd, uint32_t loc) {",,
,0.0,,,
if (fd >= 1024 || fd < 0) {,0.0,if (fd >= 1024 || fd < 0) {,,
"logMessage(CartDebugLevel, ""cart_seek: invalid fd: %d"", fd);",0.0,"logMessage(CartDebugLevel, ""cart_seek: invalid fd: %d"", fd);",,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
struct fd *myfd = fd_table + fd;,0.0,struct fd *myfd = fd_table + fd;,,
,0.0,,,
if (myfd->state != FD_OPEN) {,0.0,if (myfd->state != FD_OPEN) {,,
"logMessage(CartDebugLevel, ""cart_seek: file not open"");",0.0,"logMessage(CartDebugLevel, ""cart_seek: file not open"");",,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
if (loc > myfd->size) {,0.0,if (loc > myfd->size) {,,
"logMessage(CartDebugLevel, ""cart_seek: loc > file size"");",0.0,"logMessage(CartDebugLevel, ""cart_seek: loc > file size"");",,
return -1;,0.0,return -1;,,
},0.0,},,
,0.0,,,
myfd->pos = loc;,0.0,myfd->pos = loc;,,
,0.0,,,
// Return successfully,0.5,,// Return successfully,
return (0);,0.0,return (0);,,
},0.0,},,
